"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[11169],{3905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>k});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),p=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},c=function(t){var e=p(t.components);return n.createElement(s.Provider,{value:e},t.children)},m="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),m=p(a),d=r,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||l;return a?n.createElement(k,i(i({ref:e},c),{},{components:a})):n.createElement(k,i({ref:e},c))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[m]="string"==typeof t?t:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},98194:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_position:9},i="Data transformation",o={unversionedId:"guides/define_call_message",id:"version-5.14.1/guides/define_call_message",title:"Data transformation",description:"This guide is the most important of all this documentation. Take your time, and read it carefully...",source:"@site/versioned_docs/version-5.14.1/guides/define_call_message.md",sourceDirName:"guides",slug:"/guides/define_call_message",permalink:"/starknet.js/docs/5.14.1/guides/define_call_message",draft:!1,tags:[],version:"5.14.1",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"defaultSidebar",previous:{title:"Create account",permalink:"/starknet.js/docs/5.14.1/guides/create_account"},next:{title:"Estimate fees",permalink:"/starknet.js/docs/5.14.1/guides/estimate_fees"}},s={},p=[{value:"Types of data",id:"types-of-data",level:2},{value:"Cairo",id:"cairo",level:3},{value:"Starknet",id:"starknet",level:3},{value:"JavaScript / TypeScript",id:"javascript--typescript",level:3},{value:"Preparation of data before delivery",id:"preparation-of-data-before-delivery",level:2},{value:"felt, u8, u16, u32, usize, u64, u128, felt252, address",id:"felt-u8-u16-u32-usize-u64-u128-felt252-address",level:3},{value:"bool",id:"bool",level:3},{value:"u256",id:"u256",level:3},{value:"string",id:"string",level:3},{value:"longString",id:"longstring",level:3},{value:"tuple",id:"tuple",level:3},{value:"named tuple",id:"named-tuple",level:3},{value:"struct",id:"struct",level:3},{value:"array",id:"array",level:3},{value:"complex types",id:"complex-types",level:3},{value:"Authorized types for Starknet.js methods",id:"authorized-types-for-starknetjs-methods",level:2},{value:"list of parameters",id:"list-of-parameters",level:3},{value:"Array of parameters",id:"array-of-parameters",level:3},{value:"Object (without ABI conformity check)",id:"object-without-abi-conformity-check",level:3},{value:"Object (with ABI conformity check)",id:"object-with-abi-conformity-check",level:3},{value:"Call, or Call[]",id:"call-or-call",level:3},{value:"Array of strings (representing numbers)",id:"array-of-strings-representing-numbers",level:3},{value:"summary table for arguments",id:"summary-table-for-arguments",level:3},{value:"Receive data from a Cairo contract",id:"receive-data-from-a-cairo-contract",level:2},{value:"Parse configuration",id:"parse-configuration",level:2},{value:"parseRequest",id:"parserequest",level:3},{value:"parseResponse",id:"parseresponse",level:3},{value:"formatResponse",id:"formatresponse",level:3}],c={toc:p},m="wrapper";function u(t){let{components:e,...a}=t;return(0,r.kt)(m,(0,n.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-transformation"},"Data transformation"),(0,r.kt)("p",null,"This guide is the most important of all this documentation. Take your time, and read it carefully..."),(0,r.kt)("p",null,"Cairo contracts and JavaScript/TypeScript languages do not have the same types of data. To exchange data with Starknet, the data have to be transformed and formatted in a list of numbers."),(0,r.kt)("p",null,"So, it's necessary to prepare the data before sending them to a contract.\nOn the other side, when a contract sends data to your DAPP (result of a call), you also have to transform them before using them in your code."),(0,r.kt)("p",null,"In Starknet.js, you can perform these transformations manually, but you can take advantage of methods that performs these transformations."),(0,r.kt)("h2",{id:"types-of-data"},"Types of data"),(0,r.kt)("h3",{id:"cairo"},"Cairo"),(0,r.kt)("p",null,"Cairo has 2 versions, involving 2 types of data:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cairo 0"),": here, everything is felt, an integer on 251 bits.",(0,r.kt)("br",{parentName:"li"}),"Available: array, struct, tuple, named tuple, a mix of these elements."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Cairo 1"),": with plethora of literal types: u8, u16, u32, usize, u64, u128, felt252, u256, bool, address.",(0,r.kt)("br",{parentName:"li"}),"Available: array, struct, tuple, a mix of these elements.")),(0,r.kt)("p",null,"Starknet.js is compatible with both versions."),(0,r.kt)("h3",{id:"starknet"},"Starknet"),(0,r.kt)("p",null,"Starknet is waiting a list of felts, and answers with the same format."),(0,r.kt)("h3",{id:"javascript--typescript"},"JavaScript / TypeScript"),(0,r.kt)("p",null,"These types does not exist in JS/TS - you have Number, bigInt, string, array, objects... and types defined in libraries."),(0,r.kt)("p",null,"In Starknet.js, it's a bit ... complicated, you have the BigNumberish type and it can include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'String representing a number: "123", "0xabc2"'),(0,r.kt)("li",{parentName:"ul"},"Number (max 53 bits): 123"),(0,r.kt)("li",{parentName:"ul"},"BigInt (max 255 bits): 12345612345n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { BigNumberish } from "starknet";\nconst decimals: BigNumberish = 18;\n')),(0,r.kt)("h2",{id:"preparation-of-data-before-delivery"},"Preparation of data before delivery"),(0,r.kt)("p",null,"If your Cairo smart-contract is waiting a:"),(0,r.kt)("h3",{id:"felt-u8-u16-u32-usize-u64-u128-felt252-address"},"felt, u8, u16, u32, usize, u64, u128, felt252, address"),(0,r.kt)("p",null,"Starknet is waiting a felt.",(0,r.kt)("br",{parentName:"p"}),"\n","You can send to Starknet.js methods: bigNumberish."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'await myContract.my_function(12, "13", "0xe", 15n);\n')),(0,r.kt)("h3",{id:"bool"},"bool"),(0,r.kt)("p",null,"Starknet is waiting a felt, containing 0 or 1.",(0,r.kt)("br",{parentName:"p"}),"\n","You can send to Starknet.js methods: boolean, bigNumberish."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await myContract.my_function(true, 1);\n")),(0,r.kt)("h3",{id:"u256"},"u256"),(0,r.kt)("p",null,"Starknet is waiting 2 felts, the first including the lowest 128 bits, the second including the 128 highest bits.",(0,r.kt)("br",{parentName:"p"}),"\n","You can send to Starknet.js methods: bigNumberish (Cairo 1 only), Uint256 object (both Cairo 0 & 1)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'await myContract0.my_function({low: 100, high: 0}) // Cairo 0 & 1 contract\nawait myContract1.my_function(cairo.uint256(100)) // Cairo 0 & 1 contract\nawait myContract2.my_function(12345678, "13456789765", "0xe23a40b543f", 1534566734334n) // Cairo 1 contract\n')),(0,r.kt)("p",null,"In specific cases that we will see hereunder, you can use an object, with the following format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const a1: Uint256 = cairo.uint256("0x05f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd")\nconst a2: Uint256 = {low: "0xeb5337d9a885be319366b5205a414fdd", high: "0x05f7cd1fd465baff2ba9d2d1501ad0a2"};\nconst a3: Uint256 = {low: a1.low, high: a1.high};\n')),(0,r.kt)("h3",{id:"string"},"string"),(0,r.kt)("p",null,"Starknet is waiting a felt, including 31 ASCII characters max.\nYou can send to Starknet.js methods: string, bigNumberish."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'await myContract.my_function("Token", "0x0x534e5f4d41494e")\n')),(0,r.kt)("p",null,"To encode yourself a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const encStr: string = shortString.encodeShortString("Stark");\n')),(0,r.kt)("p",null,"To decode yourself a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const decStr: string = shortString.decodeShortString("0x7572692f706963742f7433382e6a7067");\n')),(0,r.kt)("p",null,'the result is: "uri/pict/t38.jpg"'),(0,r.kt)("h3",{id:"longstring"},"longString"),(0,r.kt)("p",null,"longString is a string that may contain more than 31 characters.\nStarknet is waiting an array of felt: string_len, string1, string2, ...",(0,r.kt)("br",{parentName:"p"}),"\n","You can send to Starknet.js methods: string, bigNumberish[]."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'await myContract.my_function("http://addressOfMyERC721pictures/image1.jpg")\n')),(0,r.kt)("p",null,"If you want to split yourself your longString in 31 chars substrings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const splitted: string[] = shortString.splitLongString("http://addressOfMyERC721pictures/image1.jpg")\n')),(0,r.kt)("p",null,"If you want to split yourself your longString in an array of felts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const longString: string[] = shortString.splitLongString("http://addressOfMyERC721pictures/image1.jpg" ).map( str => shortString.encodeShortString( str))\n')),(0,r.kt)("h3",{id:"tuple"},"tuple"),(0,r.kt)("p",null,"Starknet is waiting a list of felts.",(0,r.kt)("br",{parentName:"p"}),"\n","You can send to Starknet.js methods: ",(0,r.kt)("inlineCode",{parentName:"p"},"cairo.tuple()"),", object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const myTpl = cairo.tuple("0x0a", 200);\nawait myContract.my_function(myTpl);\n')),(0,r.kt)("p",null,"To construct yourself your tuple:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const myTpl = {"0": "0x0a", "1": 200};\n')),(0,r.kt)("h3",{id:"named-tuple"},"named tuple"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Only for Cairo 0.")),(0,r.kt)("p",null,"Starknet is waiting a list of felts.",(0,r.kt)("br",{parentName:"p"}),"\n","You can send to Starknet.js methods: an object, ",(0,r.kt)("inlineCode",{parentName:"p"},"cairo.tuple()"),", list of bigNumberish.",(0,r.kt)("br",{parentName:"p"}),"\n","From this ABI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "data2",\n  "type": "(min: felt, max: felt)"\n}\n')),(0,r.kt)("p",null,"you can create this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const namedTup = {min: "0x4e65ac6", max: 296735486n};\nawait myContract.my_function(namedTup);\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It's not mandatory to create an object conform to the Cairo 0 named tuple, you can just use the ",(0,r.kt)("inlineCode",{parentName:"p"},"cairo.tuple()")," function.")),(0,r.kt)("h3",{id:"struct"},"struct"),(0,r.kt)("p",null,"Starknet is waiting a list of felts.",(0,r.kt)("br",{parentName:"p"}),"\n","You can send to Starknet.js methods: an object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const myStruct = {type: "TR1POST", tries: 8, isBridged: true};\nawait myContract.my_function(myStruct);\n')),(0,r.kt)("h3",{id:"array"},"array"),(0,r.kt)("p",null,"Starknet is waiting an array of felt: array_len, array1, array2, ...",(0,r.kt)("br",{parentName:"p"}),"\n","You can send to Starknet.js methods: bigNumberish[]."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'Const myArray = [10, "0xaa", 567n];\nawait myContract.my_function(myArray);\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Do not add the ",(0,r.kt)("inlineCode",{parentName:"p"},"array_len")," parameter before your array ; Starknet.js will manage automatically this element.")),(0,r.kt)("h3",{id:"complex-types"},"complex types"),(0,r.kt)("p",null,"You can mix and nest literals, arrays, structs and tuples."),(0,r.kt)("p",null,"Starknet is waiting a list of felt.",(0,r.kt)("br",{parentName:"p"}),"\n","All these examples are valid:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Order2 = {\n        p1: BigNumberish;\n        p2: BigNumberish[];\n    }; // struct\nconst myOrder2: Order2 = {\n        p1: 17,\n        p2: [234, 467456745457n, '0x56ec'],\n    };\nconst param1 = cairo.tuple(cairo.tuple(34, '0x5e'), 234n);\nconst param2 = [[200, 201], [202, 203], [204, 205]];\nconst param3 = [myOrder2, myOrder2];\nconst param4 = [cairo.tuple(251, 40000n), cairo.tuple(252, 40001n)];\nawait myContract.my_function(param1, param2, param3, param4);\n")),(0,r.kt)("h2",{id:"authorized-types-for-starknetjs-methods"},"Authorized types for Starknet.js methods"),(0,r.kt)("p",null,"There are 12 methods using contract parameters. Some types are authorized for each method:"),(0,r.kt)("h3",{id:"list-of-parameters"},"list of parameters"),(0,r.kt)("p",null,"Only meta-class methods are using a list of parameters (as illustrated in the previous chapter).",(0,r.kt)("br",{parentName:"p"}),"\n","A Meta-Class is a Class which has any of its properties determined at run-time. The Contract object uses a Contract's ABI to determine what methods are available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'await myContract.my_function("TOKEN", "13", [10, 11, 12], 135438734812n);\n// or\nconst functionName="my_function";\nawait myContract[functionName]("TOKEN", "13", [10, 11, 12], 135438734812n);\n')),(0,r.kt)("h3",{id:"array-of-parameters"},"Array of parameters"),(0,r.kt)("p",null,"An array of parameters can be used as input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const myParams = [  {x: 100, y: 200},\n                    13,\n                    [10, 11, 12],\n                    cairo.uint256("0x295fa652e32b")];\nconst txResp = await account0.execute({\n    contractAddress:testAddress,\n    entrypoint: "change_activity",\n    calldata: myParams});\n')),(0,r.kt)("p",null,"All Starknet.js methods accepts this type of input, except meta-class, that needs 3 dots prefix:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const myParams = ["TOKEN", "13", [10, 11, 12], 135438734812n];\nawait myContract.my_function(...myParams);\n// or\nconst functionName="my_function";\nawait myContract[functionName](...myParams);\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Objects properties have to be ordered in accordance with the ABI.")),(0,r.kt)("h3",{id:"object-without-abi-conformity-check"},"Object (without ABI conformity check)"),(0,r.kt)("p",null,"Use of objects allows a clear representation of the list of parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const myParams = {\n    name: "TOKEN",\n    decimals: "13",\n    amount: 135438734812n};\nconst deployResponse = await myAccount.deployContract({\n    classHash: contractClassHash,\n    constructorCalldata: myParams });\n')),(0,r.kt)("p",null,"This type is available for: ",(0,r.kt)("inlineCode",{parentName:"p"},"CallData.compile(), hash.calculateContractAddressFromHash, account.deployContract, account.deployAccount, account.execute")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Objects properties have to be ordered in accordance with the ABI.")),(0,r.kt)("h3",{id:"object-with-abi-conformity-check"},"Object (with ABI conformity check)"),(0,r.kt)("p",null,"This is the recommended type of inputs to use, especially for complex ABI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const myFalseUint256 = { high: 1, low: 23456 }; // wrong order ; should be low first\ntype Order2 = {\n    p1: BigNumberish,\n    p2: BigNumberish[]\n}\nconst myOrder2bis: Order2 = {// wrong order ; p1 should be first\n    p2: [234, 467456745457n, "0x56ec"],\n    p1: "17"\n}\nconst functionParameters: RawArgsObject = {//wrong order ; all properties are mixed\n    active: true,\n    symbol: "NIT",\n    initial_supply: myFalseUint256,\n    recipient: account0.address,\n    decimals: 18,\n    tupoftup: cairo.tuple(cairo.tuple(34, "0x5e") ,myFalseUint256),\n    card: myOrder2bis,\n    longText: "Zorg is back, for ever, here and everywhere",\n    array1: [100, 101, 102],\n    array2: [[200, 201], [202, 203], [204, 205]],\n    array3: [myOrder2bis, myOrder2bis],\n    array4: [myFalseUint256, myFalseUint256],\n    tuple1: cairo.tuple(40000n, myOrder2bis, [54, 55n, "0xae"], "texte"),\n    name: "niceToken",\n    array5: [cairo.tuple(251, 40000n), cairo.tuple(252, 40001n)],\n}\nconst contractCallData: CallData = new CallData(compiledContractSierra.abi);\nconst myCalldata: Calldata = contractCallData.compile("constructor", functionParameters);\nconst deployResponse = await account0.deployContract({\n    classHash: contractClassHash,\n    constructorCalldata: myCalldata });\n// or\nconst myCall: Call = myContract.populate("setup_elements", functionParameters);\nconst tx = await account0.execute(myCall);\n// or\nconst myCall: Call = myContract.populate("get_elements", functionParameters);\nconst res = await myContract.get_elements(...myCall.calldata);\n')),(0,r.kt)("p",null,"It can be used only with methods that knows the abi: ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract.populate, myCallData.compile"),".",(0,r.kt)("br",{parentName:"p"}),"\n","Starknet.js will perform a full check of conformity with the ABI of the contract, reorder the objects properties if necessary, stop if something is wrong or missing, remove not requested properties, convert everything to Starknet format.",(0,r.kt)("br",{parentName:"p"}),"\n","Starknet.js will alert earlier of errors in your parameters (with human comprehensible words), before call to Starknet. So, no more incomprehensible Starknet messages due to parameters construction."),(0,r.kt)("p",null,"If a property ",(0,r.kt)("inlineCode",{parentName:"p"},"array_len")," has been added before an array , this property is ignored as it's automatically managed by Starknet.js."),(0,r.kt)("h3",{id:"call-or-call"},"Call, or Call[]"),(0,r.kt)("p",null,"A Call is an object with this format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type Call = {\n    contractAddress: string,\n    entrypoint: string,\n    calldata?: RawArgs,\n}\n")),(0,r.kt)("p",null,"and is only authorized with ",(0,r.kt)("inlineCode",{parentName:"p"},"Account.execute "),". It can be generated manually or by ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract.populate()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const myCall: Call = myContract.populate("get_component", [100, recipient]);\n// or\nconst myCall: Call = {\n    contractAddress: tokenContract.address,\n    entrypoint: "get_component",\n    calldata: CallData.compile( [100, recipient]),\n    }\n\nconst tx = await account0.execute(myCall);\n')),(0,r.kt)("p",null,"It's particularly interesting when you want to invoke a function several times in the same transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const myCall1: Call = myContract.populate("mint", {type: 7, qty: 10});\nconst myCall2: Call = myContract.populate("mint", {type: 21, qty: 3});\nconst myCall3: Call = myContract.populate("mint", {type: 2, qty: 1});\nconst tx = await account0.execute([myCall1, myCall2, myCall3]);\n')),(0,r.kt)("h3",{id:"array-of-strings-representing-numbers"},"Array of strings (representing numbers)"),(0,r.kt)("p",null,"This type is particularly useful when you need the maximum of performance and speed in your code ; You have no automatic transformation, no checks with ABI, no parsing."),(0,r.kt)("p",null,"You provide to starknet.js the low level data expected by Starknet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const specialParameters: Calldata = [\n    '2036735872918048433518',\n    '5130580',\n    '18',\n    '23456',\n    '1',\n    '17',\n    '3',\n    '234',\n    '467456745457',\n    '22252'];\nconst getResponse = await myAccount.get_bal(specialParameters,\n    {parseRequest: false});\n")),(0,r.kt)("p",null,"To use with ",(0,r.kt)("inlineCode",{parentName:"p"},"parseRequest: false")," (see hereunder)."),(0,r.kt)("h3",{id:"summary-table-for-arguments"},"summary table for arguments"),(0,r.kt)("p",null,"These types of arguments can't be used at your convenience everywhere. Here is a table showing which types can be used in which function:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"Function"),(0,r.kt)("th",{parentName:"tr",align:"center"},"array of parameters"),(0,r.kt)("th",{parentName:"tr",align:"center"},"ordered object"),(0,r.kt)("th",{parentName:"tr",align:"center"},"non ordered object"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Call & MultiCall"),(0,r.kt)("th",{parentName:"tr",align:"center"},"list of parameters"),(0,r.kt)("th",{parentName:"tr",align:"center"},"array of strings (","*",")"),(0,r.kt)("th",{parentName:"tr",align:"center"},"array of strings (","*","*",")"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("strong",{parentName:"td"},"TypeScript type")),(0,r.kt)("td",{parentName:"tr",align:"center"},"[] ",(0,r.kt)("br",null)," Calldata"),(0,r.kt)("td",{parentName:"tr",align:"center"},"{} RawArgsArray"),(0,r.kt)("td",{parentName:"tr",align:"center"},"{} RawArgsObject"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Call & Call[]"),(0,r.kt)("td",{parentName:"tr",align:"center"},"...Calldata"),(0,r.kt)("td",{parentName:"tr",align:"center"},"string[]"),(0,r.kt)("td",{parentName:"tr",align:"center"},"string[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"contract.metaClass() contract","[","metaclass]()"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"contract.call / contract.invoke"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"account.execute ",(0,r.kt)("br",null),(0,r.kt)("br",null),"(with 3 params, incl. calldata)"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("br",null),(0,r.kt)("br",null)," \u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("br",null),(0,r.kt)("br",null)," \u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f ",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)("br",null)," ",(0,r.kt)("br",null)),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("br",null),(0,r.kt)("br",null)," \u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"account.deployContract / Account"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"account.declareAndDeploy"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"CallData.compile"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"myCallData.compile"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"Contract.populate"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},"hash. calculateContract AddressFromHash"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"(","*",") = with ",(0,r.kt)("inlineCode",{parentName:"p"},"parseRequest: false"),(0,r.kt)("br",{parentName:"p"}),"\n","(","*","*",") = result of ",(0,r.kt)("inlineCode",{parentName:"p"},"Calldata.compile, myCallData.compile, myContract.populate().calldata"))),(0,r.kt)("h2",{id:"receive-data-from-a-cairo-contract"},"Receive data from a Cairo contract"),(0,r.kt)("p",null,"When you perform a call, the result depends of the contract language:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In Cairo 0, then answer is an object, with keys using the Cairo variables names. Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const res=myContract.call(...);\nconst amount = res.amount;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In Cairo 1, the result is a variable:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const amount = myContract.call(...);\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type in Cairo 1"),(0,r.kt)("th",{parentName:"tr",align:null},"Cairo 1 code"),(0,r.kt)("th",{parentName:"tr",align:null},"Type expected in JS/TS"),(0,r.kt)("th",{parentName:"tr",align:null},"JS/TS function to recover data"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"u8, u16, u32, usize, u64, u128, felt252, address"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func get_v()->u128")),(0,r.kt)("td",{parentName:"tr",align:null},"bigint"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res: bigint = myContract.call(..."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string representing an hex number"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res=myContract.call(..."),(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"const address: string = num.toHex(res);"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"u8, u16, u32, usize"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func get_v() -> u16")),(0,r.kt)("td",{parentName:"tr",align:null},"number (53 bits max)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res=myContract.call(..."),(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"const total: number = Number(res)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"u256 (255 bits max)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func get_v() -> u256")),(0,r.kt)("td",{parentName:"tr",align:null},"bigint"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res: bigint = myContract.call(..."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"array of u8, u16, u32, usize, u64, u128, felt252, address"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func get_v() -> Array<u64>")),(0,r.kt)("td",{parentName:"tr",align:null},"bigint[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res: bigint[] = myContract.call(..."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"shortString (31 ASCII characters max)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func get_v() -> felt252")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res=myContract.call(..."),(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"const title:string = shortString.decodeShortstring(res)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"longString"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func get_v() -> Array<felt252>")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res=myContract.call(..."),(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},'const longString = res.map( (shortStr: bigint) => { return shortString.decodeShortString( num.toHex( shortStr)) }).join("");'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tuple"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func get_v() -> (felt252, u8)")),(0,r.kt)("td",{parentName:"tr",align:null},'Object {"0": bigint, "1": bigint}'),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res = myContract.call(...")," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},'const res0: bigint = res["0"];')," ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"const results: bigint[] = Object.values(res)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Struct"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"}," func get_v() -> MyStruct")),(0,r.kt)("td",{parentName:"tr",align:null},"MyStruct = { account: bigint, amount: bigint}"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res: MyStruct = myContract.call(..."))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"complex array"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"func get_v() -> Array<fMyStruct>")),(0,r.kt)("td",{parentName:"tr",align:null},"MyStruct[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"const res: MyStruct[] = myContract.call(..."))))),(0,r.kt)("p",null,"If you don't know if your Contract object is interacting with a Cairo 0 or a Cairo 1 contract, you have these methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { cairo } from "starknet";\nconst isCairo1: boolean = myContract.isCairo1();\nconst isAbiCairo1: boolean = cairo.isCairo1Abi(myAbi);\n')),(0,r.kt)("h2",{id:"parse-configuration"},"Parse configuration"),(0,r.kt)("h3",{id:"parserequest"},"parseRequest"),(0,r.kt)("p",null,"If for any reason (mainly for speed of processing), you want to define yourself the low level parameters to send to Starknet, you can use the parseRequest option.",(0,r.kt)("br",{parentName:"p"}),"\n","Parameters are an array of strings (representing numbers)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const txH = await myContract.send_tk([\n    '2036735872918048433518',\n    '5130580',\n    '18'],\n    {parseRequest: false}\n);\n")),(0,r.kt)("h3",{id:"parseresponse"},"parseResponse"),(0,r.kt)("p",null,"If for any reason, you want to receive a low level answer from Starknet, you can use the parseResponse option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const result = await myContract.call("get_bals", 100n, {parseResponse: false});\n')),(0,r.kt)("p",null,"answer is an array of strings (representing numbers)."),(0,r.kt)("h3",{id:"formatresponse"},"formatResponse"),(0,r.kt)("p",null,"As seen above, the strings returned by Starknet are not automatically parsed, because ABI do not inform when a contract returns a string.",(0,r.kt)("br",{parentName:"p"}),"\n","But there is a way to have an automatic parse of a string:"),(0,r.kt)("p",null,"As an example, if a contract returns a struct containing a shortString and a longString:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{ name: felt252, description: Array<felt252> }\n")),(0,r.kt)("p",null,"You can automate the strings parse with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const formatAnswer = { name: 'string', description: 'string' }\nconst result = await myContract.get_text(calldata, {\n    parseRequest: true,\n    parseResponse: true,\n    formatResponse: formatAnswer,\n});\n")),(0,r.kt)("p",null,"The result will be an object, with 2 strings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{ name: "Organic", description: "The best way to read a long string!!!" }\n')))}u.isMDXComponent=!0}}]);