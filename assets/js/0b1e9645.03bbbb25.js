"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[86007],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=i(n),k=r,m=u["".concat(l,".").concat(k)]||u[k]||d[k]||o;return n?a.createElement(m,c(c({ref:t},p),{},{components:n})):a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=k;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,c[1]=s;for(var i=2;i<o;i++)c[i]=n[i];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},40040:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:2},c="Creating an Account",s={unversionedId:"guides/account",id:"version-4.17.1/guides/account",title:"Creating an Account",description:"Since there are no Externally Owned Accounts (EOA) in Starknet, all Accounts in Starknet are contracts.",source:"@site/versioned_docs/version-4.17.1/guides/account.md",sourceDirName:"guides",slug:"/guides/account",permalink:"/starknet.js/docs/4.17.1/guides/account",draft:!1,tags:[],version:"4.17.1",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/starknet.js/docs/4.17.1/guides/intro"},next:{title:"Deploy an ERC20 Contract",permalink:"/starknet.js/docs/4.17.1/guides/erc20"}},l={},i=[{value:"Install and setup",id:"install-and-setup",level:2},{value:"Generate random key pair",id:"generate-random-key-pair",level:2},{value:"Pre-compute address of the Account",id:"pre-compute-address-of-the-account",level:2},{value:"Funding options for the pre-computed address",id:"funding-options-for-the-pre-computed-address",level:2},{value:"OPTIONAL - Declare Account",id:"optional---declare-account",level:2},{value:"Deploy Account Contract",id:"deploy-account-contract",level:2}],p={toc:i},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"creating-an-account"},"Creating an Account"),(0,r.kt)("p",null,"Since there are no Externally Owned Accounts (EOA) in Starknet, all Accounts in Starknet are contracts."),(0,r.kt)("p",null,"Unlike in Ethereum where a wallet is created with a public and private key pair, Starknet Accounts are the only way to sign transactions and messages, and verify signatures. Therefore a Account - Contract interface is needed."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Account contracts on Starknet cannot be deployed without paying a fee.")),(0,r.kt)("p",null,"High level explanations from StarkWare can be found in this Notion ",(0,r.kt)("a",{parentName:"p",href:"https://starkware.notion.site/Deploy-a-contract-and-an-account-on-StarkNet-ed2fd13301d2414e8223bb72bb90e386"},"page"),", but in short, the process is:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Decide on your account type (OpenZeppelin, Argent, ...)"),(0,r.kt)("li",{parentName:"ol"},"Compute the address of our would-be account off-chain (addresses on Starknet are deterministic)"),(0,r.kt)("li",{parentName:"ol"},"Send funds to this pre-computed address. The funds will be used to pay for the account contract deployment"),(0,r.kt)("li",{parentName:"ol"},"Actual deployment of the Account")),(0,r.kt)("h2",{id:"install-and-setup"},"Install and setup"),(0,r.kt)("p",null,"Install the latest version of starknet with"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"npm install starknet@next")),(0,r.kt)("p",null,"Imports example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import fs from "fs";\nimport {\n  Account,\n  Contract,\n  defaultProvider,\n  ec,\n  json,\n  number,\n  hash\n} from "starknet";\n')),(0,r.kt)("p",null,"Starknet.js currently doesn't have the functionality to calculate the class hash needed for the account deployment, so we need to calculate it with some other tool, for example: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/xJonathanLEI/starkli"},"Starkli")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// class hash of OpenZeppelin Account contract version 0.5.1\nconst OZContractClassHash = '0x058d97f7d76e78f44905cc30cb65b91ea49a4b908a76703c54197bca90f81773';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// get the compiled contract ABI, in this case OpenZeppelin\nconst compiledOZAccount = json.parse(\n  fs.readFileSync("./Account.json").toString("ascii")\n);\n')),(0,r.kt)("h2",{id:"generate-random-key-pair"},"Generate random key pair"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const starkKeyPair = ec.genKeyPair();\nconst starkKeyPub = ec.getStarkKey(starkKeyPair);\n")),(0,r.kt)("p",null,"You can also get a key pair from a private key using:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"getKeyPair(pk: BigNumberish)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const privateKey = '0x-Some-Existing-Private-Key'; // you can use stark.randomAddress();\nconst starkKeyPair = ec.getKeyPair(privateKey);\nconst starkKeyPub = ec.getStarkKey(starkKeyPair);\n")),(0,r.kt)("h2",{id:"pre-compute-address-of-the-account"},"Pre-compute address of the Account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const precalculatedAddress = hash.calculateContractAddressFromHash(\n    starkKeyPub, // salt\n    OZContractClassHash,\n    [starkKeyPub],\n    0\n  );\n")),(0,r.kt)("h2",{id:"funding-options-for-the-pre-computed-address"},"Funding options for the pre-computed address"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"TESTNET")),(0,r.kt)("p",null,"You can do so by using a faucet: ",(0,r.kt)("a",{parentName:"p",href:"https://faucet.goerli.starknet.io/"},"https://faucet.goerli.starknet.io/")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"DEVNET")),(0,r.kt)("p",null,"Address is the newly ",(0,r.kt)("inlineCode",{parentName:"p"},"precalculatedAddress"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST http://127.0.0.1:5050/mint -d \'{"address":"0x04a093c37ab61065d001550089b1089922212c60b34e662bb14f2f91faee2979","amount":50000000000000000000,"lite":true}\' -H "Content-Type:application/json"\n// {"new_balance":50000000000000000000,"tx_hash":null,"unit":"wei"}\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Send funds from an already existing account")),(0,r.kt)("h2",{id:"optional---declare-account"},"OPTIONAL - Declare Account"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"NOTE: This step will fail if you haven't sent funds to the pre-calculated address.")),(0,r.kt)("p",null,"We need to use an already deployed account in order to declare ours. Starknet will always have at least 1 already declared/deployed account for this purpose."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// In this case we will use the devnet's predeployed OZ account, after you start the devnet with: `starknet-devnet --seed 0`\nconst devnetPrivateKey = '0xe3e70682c2094cac629f6fbed82c07cd';\nconst devnetAccount0Address = '0x7e00d496e324876bbc8531f2d9a82bf154d1a04a50218ee74cdd372f75a551a';\nconst devnetKeyPair = ec.getKeyPair(devnetPrivateKey);\n\nconst predeployedAccount = new Account(provider, devnetAccount0Address, devnetKeyPair);\n\nconst declareTx = await predeployedAccount.declare({\n  classHash: OZContractClassHash,\n  contract: compiledOZAccount\n});\n\nawait provider.waitForTransaction(declareTx.transaction_hash);\n")),(0,r.kt)("h2",{id:"deploy-account-contract"},"Deploy Account Contract"),(0,r.kt)("p",null,"Deploy the Account contract and wait for it to be verified on Starknet."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"NOTE: This step will fail if you haven't sent funds to the pre-calculated address.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const account = new Account(provider, precalculatedAddress, starkKeyPair);\n\n// This is OpenZeppelin account contract deployment\nconst accountResponse = await account.deployAccount({\n  classHash: OZContractClassHash,\n  constructorCalldata: [starkKeyPub],\n  contractAddress: precalculatedAddress,\n  addressSalt: starkKeyPub\n});\n\nawait provider.waitForTransaction(accountResponse.transaction_hash);\n")))}d.isMDXComponent=!0}}]);