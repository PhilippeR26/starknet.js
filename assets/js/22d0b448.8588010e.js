"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[75353],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>C});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=r,C=p["".concat(u,".").concat(d)]||p[d]||m[d]||o;return n?a.createElement(C,i(i({ref:t},c),{},{components:n})):a.createElement(C,i({ref:t},c))}));function C(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:16},i="Cairo Enums",s={unversionedId:"guides/cairo_enum",id:"guides/cairo_enum",title:"Cairo Enums",description:"Cairo Enums usage",source:"@site/docs/guides/cairo_enum.md",sourceDirName:"guides",slug:"/guides/cairo_enum",permalink:"/starknet.js/docs/next/guides/cairo_enum",draft:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{sidebar_position:16},sidebar:"defaultSidebar",previous:{title:"Interact with more than one contract within one transaction",permalink:"/starknet.js/docs/next/guides/multiCall"},next:{title:"Usage with Create React App",permalink:"/starknet.js/docs/next/guides/cra"}},u={},l=[{value:"Cairo Enums usage",id:"cairo-enums-usage",level:2},{value:"Cairo Option",id:"cairo-option",level:2},{value:"Receive Cairo Option",id:"receive-cairo-option",level:3},{value:"Send Cairo Option",id:"send-cairo-option",level:3},{value:"Cairo Result",id:"cairo-result",level:2},{value:"Receive Cairo Result",id:"receive-cairo-result",level:3},{value:"Send Cairo Result",id:"send-cairo-result",level:3},{value:"Cairo custom Enum",id:"cairo-custom-enum",level:2},{value:"Receive Cairo custom Enum",id:"receive-cairo-custom-enum",level:3},{value:"Send Cairo custom Enum",id:"send-cairo-custom-enum",level:3}],c={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cairo-enums"},"Cairo Enums"),(0,r.kt)("h2",{id:"cairo-enums-usage"},"Cairo Enums usage"),(0,r.kt)("p",null,"Cairo-lang v0.12.0 (includes Cairo v2.0.0) introduces a new type of data that can be exchanged with Starknet: the Enums. Not related to the TypeScript Enums, the Cairo Enums are identical to Rust Enums.",(0,r.kt)("br",{parentName:"p"}),"\n","More information in the Starknet book ",(0,r.kt)("a",{parentName:"p",href:"https://book.starknet.io/chapter_2/enums.html"},"here"),".",(0,r.kt)("br",{parentName:"p"}),"\n","In the following paragraphs, you will see how to send and receive Enums with the Starknet network."),(0,r.kt)("h2",{id:"cairo-option"},"Cairo Option"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Option")," Enum is a core enum, and has 2 variants (",(0,r.kt)("inlineCode",{parentName:"p"},"Some")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),"). Only the ",(0,r.kt)("inlineCode",{parentName:"p"},"some")," variant can contain data."),(0,r.kt)("h3",{id:"receive-cairo-option"},"Receive Cairo Option"),(0,r.kt)("p",null,"An example of Cairo code that returns an Option enum:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn test(self: @ContractState, val1: u16) -> Option<Order> {\n    if val1 < 100 {\n        return Option::None(());\n    }\n    Option::Some(Order { p1: 18, p2: val1 })\n}\n")),(0,r.kt)("p",null,"In your code, the Starknet.js response will be an instance of the CairoOption class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { CairoOption } from "starknet";\ntype Order = {\n    p1: BigNumberish,\n    p2: BigNumberish,\n}\nconst res: CairoOption<Order> = await myTestContract.test(50);\nconst res2: CairoOption<Order> = await myTestContract.test(150);\n')),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"CairoOption<T>"),", T is the type of the data related to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Some")," variant.",(0,r.kt)("br",{parentName:"p"}),"\n","The ",(0,r.kt)("inlineCode",{parentName:"p"},"CairoOption"),' class has "Cairo like" methods:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const a = res.isSome(); // false\nconst a2 = res2.isSome(); // true\nconst b = res.isNone(); // true\nconst b2 = res2.isNone(); // false\nconst c = res.unwrap(); // undefined\nconst c2: Order = res2.unwrap(); // { p1: 18n, p2: 150n }\n")),(0,r.kt)("h3",{id:"send-cairo-option"},"Send Cairo Option"),(0,r.kt)("p",null,"An example of Cairo code that use an Option enum as input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn test5(self: @ContractState, inp: Option<Order>) -> u16 {\n    match inp {\n        Option::Some(x) => {\n            return x.p2;\n        },\n        Option::None(()) => {\n            return 17;\n        }\n    }\n}\n")),(0,r.kt)("p",null,"In your code, the Starknet.js request is an instance of the CairoOption class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { CairoOption, CairoOptionVariant } from "starknet";\ntype Order = {\n    p1: BigNumberish,\n    p2: BigNumberish,\n}\nconst res = await myTestContract.call("test5", [new CairoOption<Order>(CairoOptionVariant.Some, {p1:20, p2:40})]) as bigint;\nconst res2 = await myTestContract.call("test5", [new CairoOption<Order>(CairoOptionVariant.None)]) as bigint;\n')),(0,r.kt)("h2",{id:"cairo-result"},"Cairo Result"),(0,r.kt)("p",null,"Cairo v2.1.0 introduces an other core Enum: ",(0,r.kt)("inlineCode",{parentName:"p"},"Result"),".",(0,r.kt)("br",{parentName:"p"}),"\n","This Enum has 2 variants (",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Err"),") and both variants can contain data."),(0,r.kt)("h3",{id:"receive-cairo-result"},"Receive Cairo Result"),(0,r.kt)("p",null,"An example of Cairo code that returns a Result enum:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn test(self: @ContractState, val1: u16) -> Result<u16, u16> {\n    if val1 < 100 {\n        return Result::Err(14);\n    }\n    Result::Ok(val1)\n}\n")),(0,r.kt)("p",null,"In your code, the Starknet.js response will be an instance of the CairoResult class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { CairoResult } from "starknet";\n\nconst res:CairoResult<bigint, bigint> = await myTestContract.test(90);\nconst res2 = (await myTestContract.call("test", [110])) as CairoResult<bigint, bigint>;\n')),(0,r.kt)("p",null,"In ",(0,r.kt)("inlineCode",{parentName:"p"},"CairoResult<T, U>"),", T is the type of the data related to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," variant, and U is the type of the data related to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Err")," variant.",(0,r.kt)("br",{parentName:"p"}),"\n","The ",(0,r.kt)("inlineCode",{parentName:"p"},"CairoResult"),' class has "Cairo like" methods:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const a = res.isOk(); // false\nconst a2 = res2.isOk(); // true\nconst b = res.isErr(); // true\nconst b2 = res2.isErr(); // false\nconst c = res.unwrap(); // 14n\nconst c2 = res2.unwrap(); // 110n\n")),(0,r.kt)("h3",{id:"send-cairo-result"},"Send Cairo Result"),(0,r.kt)("p",null,"An example of Cairo code that uses a Result enum:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"fn test8(self: @ContractState, inp: Result<Order, u16>) -> u16 {\n    match inp {\n        Result::Ok(x) => {\n            return x.p2;\n        },\n        Result::Err(y) => {\n            return y;\n        }\n    }\n}\n")),(0,r.kt)("p",null,"In your code, the Starknet.js request is an instance of the CairoResult class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { CairoResult, CairoResultVariant } from "starknet";\n\nconst res = await myTestContract.call("test8", [new CairoResult<Order, BigNumberish>(CairoResultVariant.Ok, {p1:50, p2:60})]) as bigint;\nconst res2 = await myTestContract.call("test8", [new CairoResult<Order, BigNumberish>(CairoResultVariant.Err, 50)])as bigint;\n')),(0,r.kt)("h2",{id:"cairo-custom-enum"},"Cairo custom Enum"),(0,r.kt)("p",null,"In Cairo v2.0.0, you can also create your own customized Enum."),(0,r.kt)("h3",{id:"receive-cairo-custom-enum"},"Receive Cairo custom Enum"),(0,r.kt)("p",null,"An example of Cairo code that returns the Result enum:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Drop, Serde, Append)]\nenum MyEnum {\n    Response: Order,\n    Warning: felt252,\n    Error: (u16,u16),\n    Critical: Array<u32>,\n    Empty:(),\n}\nfn test(self: @ContractState, val1: u16) -> MyEnum {\n    if val1 < 100 {\n        return MyEnum::Error((3,4));\n    }\n    if val1 == 100 {\n        return MyEnum::Warning('attention:100');\n    }\n    if val1 < 150 {\n        let mut arr=ArrayTrait::new();\n        arr.append(5);\n        arr.append(6);\n        return MyEnum::Critical(arr);\n    }\n    if val1<200 {\n        return MyEnum::Empty(());\n    }\n    MyEnum::Response(Order { p1: 1, p2: val1 })\n}\n")),(0,r.kt)("p",null,"This example Enum has 5 variants (",(0,r.kt)("inlineCode",{parentName:"p"},"Response"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Warning"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Error"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Critical")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Empty"),") and both variants can contain data."),(0,r.kt)("p",null,"In your code, the Starknet.js response will be an instance of the CairoCustomEnum class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { CairoCustomEnum } from "starknet";\n\nconst res: CairoCustomEnum = await myTestContract.test(10);\nconst res2: CairoCustomEnum = await myTestContract.test(100);\nconst res3: CairoCustomEnum = await myTestContract.test(120);\nconst res4: CairoCustomEnum = await myTestContract.test(190);\nconst res5: CairoCustomEnum = await myTestContract.test(220);\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CairoCustomEnum"),' class has "Cairo like" methods:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const a = res.activeVariant(); // "Error"\nconst a2 = res2.activeVariant(); // "Warning"\nconst a3 = res3.activeVariant(); // "Critical"\nconst a4 = res4.activeVariant(); // "Response"\nconst a5 = res5.activeVariant(); // "Empty"\nconst c = res.unwrap(); // {"0": 3n, "1": 4n}\nconst c2: bigint = res2.unwrap(); // 7721172739414537047772488609840n\nconst c3: bigint[] = res3.unwrap(); // [5n, 6n]\nconst c4: Order = res4.unwrap(); // { p1: 1n, p2: 190n }\nconst c5: Object = res5.unwrap(); // {}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"In a ",(0,r.kt)("inlineCode",{parentName:"p"},"CairoCustomEnum")," instance, you can also have a direct access to the content of a variant:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const d: Order = res4.variant.Response // { p1: 1n, p2: 190n }\nconst e = res4.variant["Critical"] // undefined\n')),(0,r.kt)("h3",{id:"send-cairo-custom-enum"},"Send Cairo custom Enum"),(0,r.kt)("p",null,"An example of Cairo code that uses the Result enum:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Drop, Serde, Append)]\nenum MyEnum {\n    Response: Order,\n    Warning: felt252,\n    Error: (u16,u16),\n    Critical: Array<u32>,\n    Empty:(),\n}\nfn test2a(self: @ContractState, customEnum:MyEnum ) -> u16{\n    match customEnum{\n        MyEnum::Response(my_order)=>{return my_order.p2;},\n        MyEnum::Warning(val)=>{return 0x13_u16;},\n        MyEnum::Error((a,b))=>{return b;},\n        MyEnum::Critical(myArray)=>{return 0x3c_u16;},\n        MyEnum::Empty(_)=>{return 0xab_u16;}\n    }\n}\n")),(0,r.kt)("p",null,"In your code, the Starknet.js request is an instance of the CairoCustomEnum class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { CairoCustomEnum } from "starknet";\n\nconst orderToSend: Order = { p1: 8, p2: 10 };\nconst myCustomEnum = new CairoCustomEnum({Response: orderToSend});\nconst res14 = await myTestContract.call("test2a", [myCustomEnum]) as bigint;\nconst res14c = await myTestContract.call("test2a", [new CairoCustomEnum({ Error: cairo.tuple(100, 110) })]) as bigint;\nconst res14d = await myTestContract.call("test2a", [new CairoCustomEnum({ Critical: ["0x10", "0x11"] })]) as bigint;\nconst res14e = await myTestContract.call("test2a", [new CairoCustomEnum({ Empty: {} })]) as bigint;\n')),(0,r.kt)("p",null,"Take care that if you call a method that do not use the abi (as ",(0,r.kt)("inlineCode",{parentName:"p"},"CallData.compile"),"), you have to list all the variants of the enum, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const orderToSend: Order = { p1: 8, p2: 10 };\nconst myCustomEnum = new CairoCustomEnum({\n    Response: undefined,\n    Warning: undefined,\n    Error: cairo.tuple(100, 110),\n    Critical: undefined,\n    Empty: undefined\n    });\nconst myCalldata = CallData.compile(myCustomEnum);\nconst res = await myTestContract.call("test2a", myCalldata) as bigint;\n')))}m.isMDXComponent=!0}}]);