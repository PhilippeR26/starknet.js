"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[79829],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),i=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=i(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=i(n),y=o,m=p["".concat(l,".").concat(y)]||p[y]||u[y]||r;return n?a.createElement(m,c(c({ref:t},d),{},{components:n})):a.createElement(m,c({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,c=new Array(r);c[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,c[1]=s;for(var i=2;i<r;i++)c[i]=n[i];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},78768:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var a=n(87462),o=(n(67294),n(3905));const r={sidebar_position:7},c="Create a new contract",s={unversionedId:"guides/create_contract",id:"version-5.19.5/guides/create_contract",title:"Create a new contract",description:"When you have compiled your new Cairo contract, you can deploy it in the network.",source:"@site/versioned_docs/version-5.19.5/guides/create_contract.md",sourceDirName:"guides",slug:"/guides/create_contract",permalink:"/starknet.js/docs/5.19.5/guides/create_contract",draft:!1,tags:[],version:"5.19.5",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"defaultSidebar",previous:{title:"Interact with your contract",permalink:"/starknet.js/docs/5.19.5/guides/interact"},next:{title:"Create an account",permalink:"/starknet.js/docs/5.19.5/guides/create_account"}},l={},i=[{value:"<code>declareAndDeploy()</code> your new contract",id:"declareanddeploy-your-new-contract",level:2},{value:"<code>deployContract()</code> for a new instance",id:"deploycontract-for-a-new-instance",level:2},{value:"Construct the constructor",id:"construct-the-constructor",level:2},{value:"myCalldata.compile",id:"mycalldatacompile",level:3},{value:"CallData.compile",id:"calldatacompile",level:3},{value:"<code>declare()</code> for a new class",id:"declare-for-a-new-class",level:2}],d={toc:i},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-a-new-contract"},"Create a new contract"),(0,o.kt)("p",null,"When you have compiled your new Cairo contract, you can deploy it in the network."),(0,o.kt)("p",null,"In Starknet, a new contract has to be added in two phases:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create the contract class."),(0,o.kt)("li",{parentName:"ol"},"Deploy an instance of the contract.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You must first declare your contract class and only then deploy a new instance of it!")),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(3946).Z,width:"939",height:"741"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Both declaration and deployment will cost fees. That's why these functions are methods of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Account")," object. The account should be funded enough to be able to process everything.")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The contract class contains the logic of the contract. A contract class is identified by its Class Hash."),(0,o.kt)("li",{parentName:"ul"},"The contract instance contains the memory storage of this instance. A contract instance is identified by its contract address. You will interact with the contract instance by using this address.")),(0,o.kt)("p",null,"You will have only one Class Hash for one contract code, but you can have as many contract instances as you need."),(0,o.kt)("p",null,"Other users of the network can use your declared contract. It means that if somebody has already declared a contract class (and paid this declaration), and if you would like to have your own instance of this contract, you have only to deploy (and pay) a new instance."),(0,o.kt)("p",null,"Example: if you want an ERC20 contract, and somebody has already declared an ERC20 contract that conforms to your needs, you have just to deploy a new instance of this contract class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Provider, Account, Contract, json, stark, uint256, shortString } from "starknet";\n')),(0,o.kt)("h2",{id:"declareanddeploy-your-new-contract"},(0,o.kt)("inlineCode",{parentName:"h2"},"declareAndDeploy()")," your new contract"),(0,o.kt)("p",null,"Starknet.js proposes a function to perform both operations in one step: ",(0,o.kt)("inlineCode",{parentName:"p"},"declareAndDeploy()"),"."),(0,o.kt)("p",null,"Here, to declare & deploy a ",(0,o.kt)("inlineCode",{parentName:"p"},"Test.cairo")," smart contract, in devnet:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// connect provider\nconst provider = new Provider({ sequencer: { baseUrl: "http://127.0.0.1:5050" } });\n// connect your account. To adapt to your own account:\nconst privateKey0 = process.env.OZ_ACCOUNT_PRIVATE_KEY;\nconst account0Address: string = "0x123....789";\nconst account0 = new Account(provider, account0Address, privateKey0);\n// add ,"1" after privateKey0 if this account is not a Cairo 0 contract\n\n// Declare & deploy Test contract in devnet\nconst compiledTestSierra = json.parse(fs.readFileSync( "./compiledContracts/test.sierra").toString( "ascii"));\nconst compiledTestCasm = json.parse(fs.readFileSync( "./compiledContracts/test.casm").toString( "ascii"));\nconst deployResponse = await account0.declareAndDeploy({ contract: compiledTestSierra, casm: compiledTestCasm });\n\n// Connect the new contract instance:\nconst myTestContract = new Contract(compiledTest.abi, deployResponse.deploy.contract_address, provider);\nconsole.log("Test Contract Class Hash =", deployResponse.declare.class_hash);\nconsole.log(\'\u2705 Test Contract connected at =\', myTestContract.address);\n')),(0,o.kt)("h2",{id:"deploycontract-for-a-new-instance"},(0,o.kt)("inlineCode",{parentName:"h2"},"deployContract()")," for a new instance"),(0,o.kt)("p",null,"If the contract class is already declared, it's faster and cheaper: just use ",(0,o.kt)("inlineCode",{parentName:"p"},"deployContract()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// connect provider\nconst provider = new Provider({ sequencer: { baseUrl: "http://127.0.0.1:5050" } });\n// connect your account. To adapt to your own account:\nconst privateKey0 = process.env.OZ_ACCOUNT_PRIVATE_KEY;\nconst account0Address: string = "0x123....789";\n\nconst account0 = new Account(provider, account0Address, privateKey0);\n// add ,"1" after privateKey0 if this account is not a Cairo 0 contract\n\n// Deploy Test contract in devnet\n// ClassHash of the already declared contract\nconst testClassHash = "0xff0378becffa6ad51c67ac968948dbbd110b8a8550397cf17866afebc6c17d";\n\nconst deployResponse = await account0.deployContract({ classHash: testClassHash });\nawait provider.waitForTransaction( deployResponse.transaction_hash);\n\n// read abi of Test contract\nconst { abi: testAbi } = await provider.getClassByHash( testClassHash);\nif (testAbi === undefined) { throw new Error("no abi.") };\n\n// Connect the new contract instance:\nconst myTestContract = new Contract(testAbi, deployResponse.contract_address, provider);\nconsole.log(\'\u2705 Test Contract connected at =\', myTestContract.address);\n')),(0,o.kt)("h2",{id:"construct-the-constructor"},"Construct the constructor"),(0,o.kt)("p",null,"If your contract has a constructor with inputs, you have to provide these inputs in the ",(0,o.kt)("inlineCode",{parentName:"p"},"deployContract")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"declareAndDeploy")," commands.\nFor example, with this contract constructor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'    "name": "constructor",\n    "inputs": [\n      {\n        "name": "text",\n        "type": "core::felt252"\n      },\n      {\n        "name": "longText",\n        "type": "core::array::Array::<core::felt252>"\n      },\n      {\n        "name": "array1",\n        "type": "core::array::Array::<core::felt252>"\n      }\n    ],\n')),(0,o.kt)("p",null,"You have several ways to define these inputs:"),(0,o.kt)("h3",{id:"mycalldatacompile"},"myCalldata.compile"),(0,o.kt)("p",null,"This is the recommended way to proceed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const myArray1: RawCalldata = ["0x0a", 24, 36n];\nconst contractCallData: CallData = new CallData(compiledContractSierra.abi);\nconst contractConstructor: Calldata = contractCallData.compile("constructor", {\n        text: \'niceToken\',\n        longText: "http://addressOfMyERC721pictures/image1.jpg",\n        array1: myArray1\n    });\nconst deployResponse = await account0.deployContract({\n    classHash: contractClassHash,\n    constructorCalldata: contractConstructor\n});\n')),(0,o.kt)("p",null,"Starknet.js will perform a full verification of conformity with the abi. Properties can be unordered. Do not use properties for array_len, it will be handled automatically by Starknet.js."),(0,o.kt)("h3",{id:"calldatacompile"},"CallData.compile"),(0,o.kt)("p",null,"For very simple constructors, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"CallData.compile"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'const myArray1: RawCalldata = ["0x0a", 24, 36n];\nconst contractConstructor: Calldata = CallData.compile({\n        text: \'niceToken\',\n        longText: "http://addressOfMyERC721pictures/image1.jpg",\n        array1: myArray1\n    });\nconst deployResponse = await account0.deployContract({\n    classHash: contractClassHash,\n    constructorCalldata: contractConstructor\n});\n')),(0,o.kt)("p",null,"Properties have to be ordered in conformity with the abi."),(0,o.kt)("p",null,"Even easier:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const contractConstructor: Calldata = CallData.compile(['niceToken', \"http://addressOfMyERC721pictures/image1.jpg\", myArray1]);\n")),(0,o.kt)("h2",{id:"declare-for-a-new-class"},(0,o.kt)("inlineCode",{parentName:"h2"},"declare()")," for a new class"),(0,o.kt)("p",null,"If you want only declare a new Contract Class, use ",(0,o.kt)("inlineCode",{parentName:"p"},"declare()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// connect provider\nconst provider = new Provider({ sequencer: { baseUrl: "http://127.0.0.1:5050" } });\n// connect your account. To adapt to your own account:\nconst privateKey0 = process.env.OZ_ACCOUNT_PRIVATE_KEY;\nconst account0Address: string = "0x123....789";\n\nconst account0 = new Account(provider, account0Address, privateKey0);\n// add ,"1" after privateKey0 if this account is not a Cairo 0 contract\n\n// Declare Test contract in devnet\nconst compiledTestSierra = json.parse(fs.readFileSync( "./compiledContracts/test.sierra").toString("ascii"));\nconst compiledTestCasm = json.parse(fs.readFileSync( "./compiledContracts/test.casm").toString("ascii"));\nconst declareResponse = await account0.declare({ contract: compiledTestSierra, casm: compiledTestCasm });\nconsole.log(\'Test Contract declared with classHash =\', declareResponse.class_hash);\nawait provider.waitForTransaction(declareResponse.transaction_hash);\nconsole.log("\u2705 Test Completed.");\n')))}u.isMDXComponent=!0},3946:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/createContract-98505be1f3be7f7bbf4cd5089275cde3.png"}}]);