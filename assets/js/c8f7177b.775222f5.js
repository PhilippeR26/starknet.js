"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[20033],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||s;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},15629:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const s={sidebar_position:1,title:"Sequencer Provider",id:"sequencerProvider"},o=void 0,i={unversionedId:"guides/Old_API_doc/Provider/sequencerProvider",id:"version-5.14.1/guides/Old_API_doc/Provider/sequencerProvider",title:"Sequencer Provider",description:"On top of methods found in the Provider section, SequencerProvider has some additional ones you can use.",source:"@site/versioned_docs/version-5.14.1/guides/Old_API_doc/Provider/sequencerProvider.md",sourceDirName:"guides/Old_API_doc/Provider",slug:"/guides/Old_API_doc/Provider/sequencerProvider",permalink:"/starknet.js/docs/5.14.1/guides/Old_API_doc/Provider/sequencerProvider",draft:!1,tags:[],version:"5.14.1",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Sequencer Provider",id:"sequencerProvider"},sidebar:"defaultSidebar",previous:{title:"RPC Provider",permalink:"/starknet.js/docs/5.14.1/guides/Old_API_doc/Provider/rpcProvider"},next:{title:"Account",permalink:"/starknet.js/docs/5.14.1/guides/Old_API_doc/account"}},c={},l=[{value:"Creating an instance",id:"creating-an-instance",level:2},{value:"Methods",id:"methods",level:2},{value:"getContractAddresses()",id:"getcontractaddresses",level:3},{value:"<em>GetContractAddressesResponse</em>",id:"getcontractaddressesresponse",level:6},{value:"getCode()",id:"getcode",level:3},{value:"<em>GetCodeResponse</em>",id:"getcoderesponse",level:6},{value:"estimateMessageFee()",id:"estimatemessagefee",level:3},{value:"<em>CallL1Handler</em>",id:"calll1handler",level:5},{value:"getTransactionStatus()",id:"gettransactionstatus",level:3},{value:"<em>GetTransactionStatusResponse</em>",id:"gettransactionstatusresponse",level:6},{value:"getTransactionTrace()",id:"gettransactiontrace",level:3},{value:"<em>GetTransactionTraceResponse</em>",id:"gettransactiontraceresponse",level:6},{value:"getBlockTraces()",id:"getblocktraces",level:3},{value:"<em>BlockTransactionTracesResponse</em>",id:"blocktransactiontracesresponse",level:6}],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"On top of methods found in the ",(0,a.kt)("a",{parentName:"p",href:"./"},"Provider")," section, ",(0,a.kt)("inlineCode",{parentName:"p"},"SequencerProvider")," has some additional ones you can use."),(0,a.kt)("h2",{id:"creating-an-instance"},"Creating an instance"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"new starknet.SequencerProvider(optionsOrProvider)")),(0,a.kt)("p",null,"The options for the provider depend on the network. The structure of the options object is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"options.",(0,a.kt)("strong",{parentName:"li"},"baseUrl")," - Base URL of the network"),(0,a.kt)("li",{parentName:"ul"},"options.",(0,a.kt)("strong",{parentName:"li"},"feederGatewayUrl")," - Feeder Gateway Endpoint of the network"),(0,a.kt)("li",{parentName:"ul"},"options.",(0,a.kt)("strong",{parentName:"li"},"gatewayUrl")," - Gateway Endpoint"),(0,a.kt)("li",{parentName:"ul"},"options.",(0,a.kt)("strong",{parentName:"li"},"headers")," - ","[Optional]"," custom fetch headers")),(0,a.kt)("p",null,"or"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"options.",(0,a.kt)("strong",{parentName:"li"},"network")," - NetworkName"),(0,a.kt)("li",{parentName:"ul"},"options.",(0,a.kt)("strong",{parentName:"li"},"headers")," - ","[Optional]"," custom fetch headers")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const provider = new starknet.SequencerProvider({\n  baseUrl: BaseUrl.SN_GOERLI,\n  feederGatewayUrl: 'feeder_gateway',\n  gatewayUrl: 'gateway',\n})\n")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getcontractaddresses"},"getContractAddresses()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getContractAddresses"),"() => ",(0,a.kt)("em",{parentName:"p"},"Promise < GetContractAddressesResponse >")),(0,a.kt)("p",null,"Gets the smart contract address on the network."),(0,a.kt)("h6",{id:"getcontractaddressesresponse"},(0,a.kt)("em",{parentName:"h6"},"GetContractAddressesResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  Starknet: string;\n  GpsStatementVerifier: string;\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getcode"},"getCode()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getCode"),"(contractAddress, blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < GetCodeResponse >")),(0,a.kt)("p",null,"Gets the smart contract address on the network."),(0,a.kt)("h6",{id:"getcoderesponse"},(0,a.kt)("em",{parentName:"h6"},"GetCodeResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  bytecode: ByteCode;\n  abi: Abi;\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"estimatemessagefee"},"estimateMessageFee()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"estimateMessageFee"),"(CallL1Handler, blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,a.kt)("p",null,"Estimate fee for sending a message to L1."),(0,a.kt)("h5",{id:"calll1handler"},(0,a.kt)("em",{parentName:"h5"},"CallL1Handler")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type CallL1Handler = {\n  from_address: getDecimalString(from_address),\n  to_address: getHexString(to_address),\n  entry_point_selector: getSelector(entry_point_selector),\n  payload: getHexStringArray(payload),\n};\n\n###### _EstimateFeeResponse_\n\n```typescript\n{\n  overall_fee: number;\n  gas_price: number;\n  gas_usage: number;\n  unit: string;\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"gettransactionstatus"},"getTransactionStatus()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getTransactionStatus"),"(txHash) => ",(0,a.kt)("em",{parentName:"p"},"Promise < GetTransactionStatusResponse >")),(0,a.kt)("p",null,"Gets the status of a transaction."),(0,a.kt)("h6",{id:"gettransactionstatusresponse"},(0,a.kt)("em",{parentName:"h6"},"GetTransactionStatusResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  tx_status: 'NOT_RECEIVED' | 'RECEIVED' | 'PENDING' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1' | 'REJECTED';\n  block_hash: string;\n  tx_failure_reason?: {\n    tx_id: number;\n    code: string;\n    error_message: string;\n  }\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"gettransactiontrace"},"getTransactionTrace()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getTransactionTrace"),"(txHash) => ",(0,a.kt)("em",{parentName:"p"},"Promise < GetTransactionTraceResponse >")),(0,a.kt)("p",null,"Gets the transaction trace from a tx hash."),(0,a.kt)("h6",{id:"gettransactiontraceresponse"},(0,a.kt)("em",{parentName:"h6"},"GetTransactionTraceResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  validate_invocation?: FunctionInvocation;\n  function_invocation?: FunctionInvocation;\n  fee_transfer_invocation?: FunctionInvocation;\n  signature: Signature;\n}\n\n{\n  FunctionInvocation: {\n    caller_address: string;\n    contract_address: string;\n    calldata: {\n      [inputName: string]: string | string[] | { type: 'struct'; [k: string]: BigNumberish };\n    };\n    call_type?: string;\n    class_hash?: string;\n    selector?: string;\n    entry_point_type?: EntryPointType;\n    result: Array<any>;\n    execution_resources: ExecutionResources;\n    internal_calls: Array<FunctionInvocation>;\n    events: Array<any>;\n    messages: Array<any>;\n  };\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getblocktraces"},"getBlockTraces()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getBlockTraces"),"(blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < BlockTransactionTracesResponse >")),(0,a.kt)("p",null,"Gets the transaction traces of an entire block"),(0,a.kt)("h6",{id:"blocktransactiontracesresponse"},(0,a.kt)("em",{parentName:"h6"},"BlockTransactionTracesResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\n{\n    traces: Array<TransactionTraceResponse & { transaction_hash: string }>;\n}\n\n{\n  TransactionTraceResponse: {\n    validate_invocation?: FunctionInvocation;\n    function_invocation?: FunctionInvocation;\n    fee_transfer_invocation?: FunctionInvocation;\n    signature: Signature;\n  };\n\n  FunctionInvocation: {\n    caller_address: string;\n    contract_address: string;\n    calldata: {\n      [inputName: string]: string | string[] | { type: 'struct'; [k: string]: BigNumberish };\n    };\n    call_type?: string;\n    class_hash?: string;\n    selector?: string;\n    entry_point_type?: EntryPointType;\n    result: Array<any>;\n    execution_resources: ExecutionResources;\n    internal_calls: Array<FunctionInvocation>;\n    events: Array<any>;\n    messages: Array<any>;\n  };\n}\n")))}u.isMDXComponent=!0}}]);