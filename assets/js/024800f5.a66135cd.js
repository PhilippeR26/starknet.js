"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[5174],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,u=d["".concat(l,".").concat(m)]||d[m]||k[m]||o;return n?r.createElement(u,s(s({ref:t},c),{},{components:n})):r.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},72134:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:1,title:"Provider",id:"provider"},s=void 0,i={unversionedId:"API/Provider/provider",id:"version-4.22.0/API/Provider/provider",title:"Provider",description:"The Provider API allows you to interact with the Starknet network, without signing transactions or messages.",source:"@site/versioned_docs/version-4.22.0/API/Provider/provider.md",sourceDirName:"API/Provider",slug:"/API/Provider/",permalink:"/starknet.js/docs/4.22.0/API/Provider/",draft:!1,tags:[],version:"4.22.0",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Provider",id:"provider"},sidebar:"tutorialSidebar",previous:{title:"Starknet.js API",permalink:"/starknet.js/docs/4.22.0/API/"},next:{title:"RPC Provider",permalink:"/starknet.js/docs/4.22.0/API/Provider/rpcProvider"}},l={},p=[{value:"Creating an instance",id:"creating-an-instance",level:3},{value:"Methods",id:"methods",level:2},{value:"getChainId()",id:"getchainid",level:3},{value:"callContract()",id:"callcontract",level:3},{value:"<em>CallContractResponse</em>",id:"callcontractresponse",level:6},{value:"getBlock()",id:"getblock",level:3},{value:"<em>GetBlockResponse</em>",id:"getblockresponse",level:6},{value:"getClassAt()",id:"getclassat",level:3},{value:"<em>ContractClass</em>",id:"contractclass",level:6},{value:"getInvokeEstimateFee()",id:"getinvokeestimatefee",level:3},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse",level:6},{value:"getNonceForAddress()",id:"getnonceforaddress",level:3},{value:"getStorageAt()",id:"getstorageat",level:3},{value:"getTransactionReceipt()",id:"gettransactionreceipt",level:3},{value:"<em>GetTransactionReceiptResponse</em>",id:"gettransactionreceiptresponse",level:6},{value:"getTransaction()",id:"gettransaction",level:3},{value:"<em>GetTransactionResponse</em>",id:"gettransactionresponse",level:6},{value:"declareContract()",id:"declarecontract",level:3},{value:"<em>DeclareContractResponse</em>",id:"declarecontractresponse",level:6},{value:"getDeclareEstimateFee()",id:"getdeclareestimatefee",level:3},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse-1",level:6},{value:"waitForTransaction()",id:"waitfortransaction",level:3},{value:"getStarkName()",id:"getstarkname",level:3},{value:"getAddressFromStarkName()",id:"getaddressfromstarkname",level:3},{value:"getStateUpdate()",id:"getstateupdate",level:3},{value:"StateUpdateResponse",id:"stateupdateresponse",level:6}],c={toc:p},d="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"Provider")," API allows you to interact with the Starknet network, without signing transactions or messages."),(0,a.kt)("p",null,"Typically, these are ",(0,a.kt)("em",{parentName:"p"},"read")," calls on the blockchain."),(0,a.kt)("h3",{id:"creating-an-instance"},"Creating an instance"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"new starknet.Provider(optionsOrProvider)")),(0,a.kt)("p",null,"The options for the provider depend on the network. The structure of the options object is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"options.",(0,a.kt)("strong",{parentName:"li"},"sequencer")," - Options for sequencer provider"),(0,a.kt)("li",{parentName:"ul"},"options.",(0,a.kt)("strong",{parentName:"li"},"rpc")," - Options for RPC provider")),(0,a.kt)("p",null,"The easiest way to get started is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const provider = new starknet.Provider()\n")),(0,a.kt)("p",null,"The above snippet creates a Starknet Provider instance with ",(0,a.kt)("inlineCode",{parentName:"p"},"goerli-alpha")," network."),(0,a.kt)("p",null,"However, if you want to use ",(0,a.kt)("inlineCode",{parentName:"p"},"mainnet-alpha")," or explicitly declare the network, you can use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const provider = new starknet.Provider({\n  sequencer: {\n    network: 'mainnet-alpha' // or 'goerli-alpha'\n  }\n})\n")),(0,a.kt)("p",null,"If you want more control:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const provider = new starknet.Provider({\n  sequencer: {\n    baseUrl: 'https://alpha4.starknet.io',\n    feederGatewayUrl: 'feeder_gateway',\n    gatewayUrl: 'gateway',\n  }\n})\n")),(0,a.kt)("p",null,"These are also the default options for the Provider constructor with ",(0,a.kt)("inlineCode",{parentName:"p"},"network: 'goerli-alpha'"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note")),(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"network")," argument should work in most cases. If you want to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"sequencer")," argument with ",(0,a.kt)("inlineCode",{parentName:"p"},"baseUrl"),", you will not be able to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"network")," field in the object.")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"getchainid"},"getChainId()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getChainId"),"() => ",(0,a.kt)("em",{parentName:"p"},"Promise < StarknetChainId >")),(0,a.kt)("p",null,"Returns the chain Id for the current network."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"callcontract"},"callContract()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"callContract"),"(call ","[ , blockIdentifier ]",") => ",(0,a.kt)("em",{parentName:"p"},"Promise < CallContractResponse >")),(0,a.kt)("p",null,"Calls a function on the Starknet contract."),(0,a.kt)("p",null,"The call object structure:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"call.",(0,a.kt)("strong",{parentName:"li"},"contractAddress")," - Address of the contract"),(0,a.kt)("li",{parentName:"ul"},"call.",(0,a.kt)("strong",{parentName:"li"},"entrypoint")," - Entrypoint of the call (method name)"),(0,a.kt)("li",{parentName:"ul"},"call.",(0,a.kt)("strong",{parentName:"li"},"calldata")," - Payload for the invoking method")),(0,a.kt)("h6",{id:"callcontractresponse"},(0,a.kt)("em",{parentName:"h6"},"CallContractResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  result: string[];\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getblock"},"getBlock()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getBlock"),"(blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < GetBlockResponse >")),(0,a.kt)("p",null,"Gets the block information."),(0,a.kt)("h6",{id:"getblockresponse"},(0,a.kt)("em",{parentName:"h6"},"GetBlockResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  accepted_time: number;\n  block_hash: string;\n  block_number: number;\n  gas_price: string;\n  new_root: string;\n  old_root?: string;\n  parent_hash: string;\n  sequencer: string;\n  status: 'NOT_RECEIVED' | 'RECEIVED' | 'PENDING' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1' | 'REJECTED';\n  transactions: Array<string>;\n  starknet_version?: string;\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getclassat"},"getClassAt()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getClassAt"),"(contractAddress, blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < ContractClass >")),(0,a.kt)("p",null,"Gets the contract class of the deployed contract."),(0,a.kt)("h6",{id:"contractclass"},(0,a.kt)("em",{parentName:"h6"},"ContractClass")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  program: CompressedProgram;\n  entry_points_by_type: EntryPointsByType;\n  abi?: Abi;\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getinvokeestimatefee"},"getInvokeEstimateFee()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getInvokeEstimateFee"),"(invocationWithTxType, invocationDetails, blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,a.kt)("p",null,"Estimate fee for invoke transaction."),(0,a.kt)("h6",{id:"estimatefeeresponse"},(0,a.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getnonceforaddress"},"getNonceForAddress()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getNonceForAddress"),"(contractAddress, blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < BigNumberish >")),(0,a.kt)("p",null,"Gets the nonce of the provided contractAddress. This was renamed from ",(0,a.kt)("inlineCode",{parentName:"p"},"getNonce")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"getNonceForAddress")," to avoid confusion when inheriting an Account from the Provider class."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getstorageat"},"getStorageAt()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getStorageAt"),"(contractAddress, key, blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < string >")),(0,a.kt)("p",null,"Gets the contract's storage variable at a specific key."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"gettransactionreceipt"},"getTransactionReceipt()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getTransactionReceipt"),"(txHash) => ",(0,a.kt)("em",{parentName:"p"},"Promise < GetTransactionReceiptResponse >")),(0,a.kt)("p",null,"Gets the status of a transaction."),(0,a.kt)("h6",{id:"gettransactionreceiptresponse"},(0,a.kt)("em",{parentName:"h6"},"GetTransactionReceiptResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transaction_hash: string;\n  status: 'NOT_RECEIVED' | 'RECEIVED' | 'PENDING' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1' | 'REJECTED';\n  actual_fee?: string;\n  status_data?: string;\n  messages_sent?: Array<MessageToL1>;\n  events?: Array<Event>;\n  l1_origin_message?: MessageToL2;\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"gettransaction"},"getTransaction()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getTransaction"),"(txHash) => ",(0,a.kt)("em",{parentName:"p"},"Promise < GetTransactionResponse >")),(0,a.kt)("p",null,"Gets the transaction information from a tx hash."),(0,a.kt)("h6",{id:"gettransactionresponse"},(0,a.kt)("em",{parentName:"h6"},"GetTransactionResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transaction_hash: string;\n  version?: string;\n  signature?: Signature;\n  max_fee?: string;\n  nonce?: string;\n  contract_address?: string;\n  entry_point_selector?: string;\n  calldata?: RawCalldata;\n  contract_class?: ContractClass;\n  sender_address?: string;\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"declarecontract"},"declareContract()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"declareContract"),"(transaction, details) => ",(0,a.kt)("em",{parentName:"p"},"Promise < DeclareContractResponse >")),(0,a.kt)("p",null,"Declare a contract on Starknet."),(0,a.kt)("h6",{id:"declarecontractresponse"},(0,a.kt)("em",{parentName:"h6"},"DeclareContractResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transaction_hash: string;\n  class_hash: string;\n};\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getdeclareestimatefee"},"getDeclareEstimateFee()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getDeclareEstimateFee"),"(transaction, details, blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,a.kt)("p",null,"Estimate fee for declare transaction."),(0,a.kt)("h6",{id:"estimatefeeresponse-1"},(0,a.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n};\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"waitfortransaction"},"waitForTransaction()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"waitForTransaction"),"(txHash ","[ , retryInterval]",") => ",(0,a.kt)("em",{parentName:"p"},"Promise < GetTransactionReceiptResponse >")),(0,a.kt)("p",null,"Wait for the transaction to be accepted on L2 or L1."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getstarkname"},"getStarkName()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getStarkName"),"(address, StarknetIdContract) => ",(0,a.kt)("em",{parentName:"p"},"Promise<string | Error>")),(0,a.kt)("p",null,"Gets starknet.id stark name with the address provided"),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"StarknetIdContract")," argument can be undefined, if it is, the function will automatically use official starknet id contracts of your network."),(0,a.kt)("p",null,"Returns directly a string (Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"vitalik.stark"),")."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getaddressfromstarkname"},"getAddressFromStarkName()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getAddressFromStarkName"),"(name, StarknetIdContract) => ",(0,a.kt)("em",{parentName:"p"},"Promise<string | Error>")),(0,a.kt)("p",null,"Gets account address with the starknet id stark name."),(0,a.kt)("p",null,"The ",(0,a.kt)("em",{parentName:"p"},"StarknetIdContract")," argument can be undefined, if it is, the function will automatically use official starknet id contracts of your network."),(0,a.kt)("p",null,"Returns directly the address in a string (Example: ",(0,a.kt)("inlineCode",{parentName:"p"},"0xff...34"),")."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"getstateupdate"},"getStateUpdate()"),(0,a.kt)("p",null,"provider.",(0,a.kt)("strong",{parentName:"p"},"getStateUpdate"),"(blockIdentifier) => ",(0,a.kt)("em",{parentName:"p"},"Promise < StateUpdateResponse >")),(0,a.kt)("p",null,"Gets the state changes in a specific block"),(0,a.kt)("h6",{id:"stateupdateresponse"},"StateUpdateResponse"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  block_hash: string;\n  new_root: string;\n  old_root: string;\n  state_diff: {\n    storage_diffs: Array<StorageDiffItem>;\n    declared_contract_hashes: Array<string>;\n    deployed_contracts: Array<DeployedContractItem>;\n    nonces: Array<Nonces>;\n  };\n};\n")))}k.isMDXComponent=!0}}]);