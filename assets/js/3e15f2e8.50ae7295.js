"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[52201],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},19817:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:6},i="Interact with your contract",c={unversionedId:"guides/interact",id:"version-5.24.3/guides/interact",title:"Interact with your contract",description:"Once your provider, contract, and account are connected, you can interact with the contract:",source:"@site/versioned_docs/version-5.24.3/guides/interact.md",sourceDirName:"guides",slug:"/guides/interact",permalink:"/starknet.js/docs/guides/interact",draft:!1,tags:[],version:"5.24.3",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"defaultSidebar",previous:{title:"\ud83d\udd0c Connect a deployed contract",permalink:"/starknet.js/docs/guides/connect_contract"},next:{title:"Create a new contract",permalink:"/starknet.js/docs/guides/create_contract"}},s={},l=[{value:"\ud83d\udd0d Read from contract memory, with meta-class",id:"-read-from-contract-memory-with-meta-class",level:2},{value:"\u270d\ufe0f Write to contract memory, with meta-class",id:"\ufe0f-write-to-contract-memory-with-meta-class",level:2},{value:"Sending sequential transactions",id:"sending-sequential-transactions",level:2},{value:"Write several operations, with Account.execute",id:"write-several-operations-with-accountexecute",level:2},{value:"Other existing methods",id:"other-existing-methods",level:2},{value:"Function name defined in the code",id:"function-name-defined-in-the-code",level:3},{value:"Light and fast call",id:"light-and-fast-call",level:3}],d={toc:l},u="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interact-with-your-contract"},"Interact with your contract"),(0,r.kt)("p",null,"Once your provider, contract, and account are connected, you can interact with the contract:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"you can read the memory of the contract, without fees."),(0,r.kt)("li",{parentName:"ul"},"you can write to memory, but you have to pay fees.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"On Mainnet, you have to pay fees with a bridged ETH token."),(0,r.kt)("li",{parentName:"ul"},"On Testnet, you have to pay with a bridged Goerli ETH token."),(0,r.kt)("li",{parentName:"ul"},"On devnet, you have to pay with a dummy ETH token.")))),(0,r.kt)("p",null,"Your account should be funded enough to pay fees (0.01 ETH should be enough to start)."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(49898).Z,width:"805",height:"545"})),(0,r.kt)("p",null,"Here we will interact with a ",(0,r.kt)("inlineCode",{parentName:"p"},"test.cairo")," contract (Cairo 0) already deployed on Testnet at the address:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://testnet.starkscan.co/contract/0x5f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd#read-contract"},"0x5f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd"))),(0,r.kt)("p",null,"This contract contains a storage variable called ",(0,r.kt)("inlineCode",{parentName:"p"},"balance"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It can be read with the ",(0,r.kt)("inlineCode",{parentName:"li"},"@view function: get_balance()")),(0,r.kt)("li",{parentName:"ul"},"Balance can be modified with the ",(0,r.kt)("inlineCode",{parentName:"li"},"@external function: increase_balance(amount1: felt, amount2: felt)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Provider, Contract, Account, ec, json } from "starknet";\n')),(0,r.kt)("h2",{id:"-read-from-contract-memory-with-meta-class"},"\ud83d\udd0d Read from contract memory, with meta-class"),(0,r.kt)("p",null,"To read the balance, you need to connect a Provider and a Contract.",(0,r.kt)("br",{parentName:"p"}),"\n","You have to call Starknet, with the use of the meta-class method: ",(0,r.kt)("inlineCode",{parentName:"p"},"contract.function_name(params)")," (here ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," is not necessary, because there are no parameters for the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_balance")," function)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'//initialize Provider\nconst provider = new Provider({ sequencer: { network: constants.NetworkName.SN_GOERLI } });\n// Connect the deployed Test contract in Testnet\nconst testAddress = "0x5f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd";\n\n// read abi of Test contract\nconst { abi: testAbi } = await provider.getClassAt(testAddress);\nif (testAbi === undefined) { throw new Error("no abi.") };\nconst myTestContract = new Contract(testAbi, testAddress, provider);\n\n// Interaction with the contract with call\nconst bal1 = await myTestContract.get_balance();\nconsole.log("Initial balance =", bal1.res.toString()); // .res because the return value is called \'res\' in the Cairo 0 contract.\n// With Cairo 1 contract, the result value is in bal1, as bigint.\n')),(0,r.kt)("h2",{id:"\ufe0f-write-to-contract-memory-with-meta-class"},"\u270d\ufe0f Write to contract memory, with meta-class"),(0,r.kt)("p",null,"To increase the balance, you need in addition a connected and funded Account."),(0,r.kt)("p",null,"You have to invoke Starknet, with the use of the meta-class method: ",(0,r.kt)("inlineCode",{parentName:"p"},"contract.function_name(params)")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"After the invoke, you have to wait the incorporation of the modification of Balance in the network, with ",(0,r.kt)("inlineCode",{parentName:"p"},"await provider.waitForTransaction(transaction_hash)"))),(0,r.kt)("p",null,"Here is an example of how to increase and check the balance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'//initialize Provider\nconst provider = new Provider({ sequencer: { network: constants.NetworkName.SN_GOERLI } });\n// connect your account. To adapt to your own account:\nconst privateKey0 = process.env.OZ_ACCOUNT_PRIVATE_KEY;\nconst account0Address = "0x123....789";\n\nconst account0 = new Account(provider, account0Address, privateKey0);\n// add ,"1" after privateKey0 if this account is not a Cairo 0 contract\n\n// Connect the deployed Test contract in Testnet\nconst testAddress = "0x5f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd";\n\n// read abi of Test contract\nconst { abi: testAbi } = await provider.getClassAt(testAddress);\nif (testAbi === undefined) { throw new Error("no abi.") };\nconst myTestContract = new Contract(testAbi, testAddress, provider);\n\n// Connect account with the contract\nmyTestContract.connect(account0);\n\n// Interactions with the contract with meta-class\nconst bal1 = await myTestContract.get_balance();\nconsole.log("Initial balance =", bal1.res.toString()); // Cairo 0 contract\n// increase_balance needs 2 felts, to add them to the balance.\nconst myCall = myTestContract.populate("increase_balance", [10, 30]);\nconst res = await myTestContract.increase_balance(myCall.calldata);\nawait provider.waitForTransaction(res.transaction_hash);\n\nconst bal2 = await myTestContract.get_balance();\nconsole.log("Final balance =", bal2.res.toString());\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Contract.populate()")," is the recommended method to define the parameters to call/invoke the Cairo functions."),(0,r.kt)("h2",{id:"sending-sequential-transactions"},"Sending sequential transactions"),(0,r.kt)("p",null,"If you intend to send sequential transactions through the contract object, like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const tx = await cairo1Contract.array2d_ex(data);\nconst tx1 = await cairo1Contract.array2d_ex(data);\n")),(0,r.kt)("p",null,"Be sure to use ",(0,r.kt)("inlineCode",{parentName:"p"},"waitForTransaction")," between the calls, because you may experience issues with the nonce not incrementing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const tx = await cairo1Contract.array2d_ex(data);\nawait provider.waitForTransaction(tx.transaction_hash);\nconst tx1 = await cairo1Contract.array2d_ex(data);\nawait provider.waitForTransaction(tx1.transaction_hash);\n")),(0,r.kt)("h2",{id:"write-several-operations-with-accountexecute"},"Write several operations, with Account.execute"),(0,r.kt)("p",null,"In a Starknet transaction, you can include several invoke operations. It will be performed with ",(0,r.kt)("inlineCode",{parentName:"p"},"account.execute"),"."),(0,r.kt)("p",null,"We will later see this case more in detail in this dedicated ",(0,r.kt)("a",{parentName:"p",href:"/starknet.js/docs/guides/multiCall"},"guide"),", but in summary, you use this command with the following parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"address of the contract to invoke"),(0,r.kt)("li",{parentName:"ul"},"name of the function to invoke"),(0,r.kt)("li",{parentName:"ul"},"and an array of parameters for this function")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const result = await account.execute(\n  {\n    contractAddress: myContractAddress,\n    entrypoint: 'transfer',\n    calldata: CallData.compile({\n      recipient: receiverAddress,\n      amount: cairo.uint256(100000n)\n    })\n  }\n);\nawait provider.waitForTransaction(result.transaction_hash);\n")),(0,r.kt)("h2",{id:"other-existing-methods"},"Other existing methods"),(0,r.kt)("p",null,"Some other useful methods to interact with Starknet:"),(0,r.kt)("h3",{id:"function-name-defined-in-the-code"},"Function name defined in the code"),(0,r.kt)("p",null,"If you want to call a function with its name contained in a variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const listFn = ["calc-sum", "calc-hash", "calc-proof"];\n// fnChoice is a number defined during execution\nconst res = await myTestContract[listFn[fnChoice]](200, 234567897n, 865423);\n')),(0,r.kt)("h3",{id:"light-and-fast-call"},"Light and fast call"),(0,r.kt)("p",null,"If you want to have a very fast execution, with minimum resource usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const specialParameters: Calldata = [\n    '2036735872918048433518',\n    '5130580',\n    '18'\n  ];\nconst getResponse = await myAccount.call(\n  \"get_bal\",\n  specialParameters,\n  { parseRequest: false }\n);\n")),(0,r.kt)("p",null,"You provide the low-level numbers expected by Starknet, without any parsing or checking. See more details ",(0,r.kt)("a",{parentName:"p",href:"/starknet.js/docs/guides/define_call_message#parse-configuration"},"here"),"."))}p.isMDXComponent=!0},49898:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Interact_contract-bf3c4a34008afdc2fb08f0b30f83111e.png"}}]);