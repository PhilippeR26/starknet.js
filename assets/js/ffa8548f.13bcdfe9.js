"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[70661],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(k,o(o({ref:n},p),{},{components:t})):a.createElement(k,o({ref:n},p))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},37005:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const i={sidebar_position:18},o="Migrate from v4 to v5",l={unversionedId:"guides/migrate",id:"version-5.24.3/guides/migrate",title:"Migrate from v4 to v5",description:"This document only covers the features present in v4 which have changed in some significant way in v5.",source:"@site/versioned_docs/version-5.24.3/guides/migrate.md",sourceDirName:"guides",slug:"/guides/migrate",permalink:"/starknet.js/docs/guides/migrate",draft:!1,tags:[],version:"5.24.3",sidebarPosition:18,frontMatter:{sidebar_position:18},sidebar:"defaultSidebar",previous:{title:"Automatic TypeScript parsing of Cairo ABI-s",permalink:"/starknet.js/docs/guides/automatic_cairo_ABI_parsing"}},s={},c=[{value:"<em>number</em> utility replaced by <em>num</em>",id:"number-utility-replaced-by-num",level:2},{value:"<em>bn.js</em> no longer supported",id:"bnjs-no-longer-supported",level:2},{value:"ec (elliptic curve)",id:"ec-elliptic-curve",level:2},{value:"&#39;declare<strong>And</strong>Deploy&#39; renaming",id:"declareanddeploy-renaming",level:2},{value:"Calldata and returned values",id:"calldata-and-returned-values",level:2},{value:"Provider",id:"provider",level:2},{value:"Uint256",id:"uint256",level:2},{value:"get-starknet",id:"get-starknet",level:2}],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"migrate-from-v4-to-v5"},"Migrate from v4 to v5"),(0,r.kt)("p",null,"This document only covers the features present in v4 which have changed in some significant way in v5."),(0,r.kt)("p",null,"If you encounter any missing changes, please let us know and we will update this guide."),(0,r.kt)("h2",{id:"number-utility-replaced-by-num"},(0,r.kt)("em",{parentName:"h2"},"number")," utility replaced by ",(0,r.kt)("em",{parentName:"h2"},"num")),(0,r.kt)("p",null,"To avoid confusion with the native ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," type, the ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," namespace has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"num"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// v4\nconst res = number.isHex(d1);\n\n// v5\nconst res = num.isHex(d1);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"number.toFelt()")," has been removed, if manual handling is necessary ",(0,r.kt)("inlineCode",{parentName:"p"},"cairo.felt()")," can be used."),(0,r.kt)("h2",{id:"bnjs-no-longer-supported"},(0,r.kt)("em",{parentName:"h2"},"bn.js")," no longer supported"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"bn.js")," library has been removed in favor of using the native JavaScript ",(0,r.kt)("inlineCode",{parentName:"p"},"BigInt")," data type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// v4\nconst qty = new BN("0x4a8bc");\n\n// v5\nconst qty1 = BigInt("0x4a8bc");\nconst qty2 = 32786324915918425n;\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"BigNumberish")," type is now defined as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'String representing a number: "123", "0xabc2"'),(0,r.kt)("li",{parentName:"ul"},"Number (max 53 bits): 123"),(0,r.kt)("li",{parentName:"ul"},"BigInt (max 255 bits): 12345612345n")),(0,r.kt)("p",null,"Some commonly used ",(0,r.kt)("inlineCode",{parentName:"p"},"BN")," utility methods are of course no longer present, however, they have simple equivalents:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".mul()")," and ",(0,r.kt)("inlineCode",{parentName:"li"},".div()"),": common operators can be used with bigints: ",(0,r.kt)("inlineCode",{parentName:"li"},"+")," ",(0,r.kt)("inlineCode",{parentName:"li"},"-")," ",(0,r.kt)("inlineCode",{parentName:"li"},"*")," ",(0,r.kt)("inlineCode",{parentName:"li"},"/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".umod()")," can be easily replaced with:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// v4\nconst c = a.umod(b);\n\n// v5\nconst tmp = a % b; // a and b are bigint\nconst c = tmp >= 0n ? tmp : tmp + b;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".toarray()")," can be replaced with ",(0,r.kt)("inlineCode",{parentName:"li"},"num.hexToBytes(a)"))),(0,r.kt)("h2",{id:"ec-elliptic-curve"},"ec (elliptic curve)"),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"bn.js")," removal the accompanying elliptic curve libraries have also been replaced,\nconsequently many functions have been relocated or modified."),(0,r.kt)("p",null,"The concept of a key pair, where the private and public key are used as a single entity, has been removed.\n",(0,r.kt)("inlineCode",{parentName:"p"},"ec.getKeyPair()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ec.getKeyPairFromPublicKey()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ec.genKeyPair()")," do not exist anymore, corresponding\nmethods use the private key directly. Check the following examples:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Account")," creation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// v4\nconst privateKey0 = accountTestnet4PrivateKey;\nconst account0Address: string = accountTestnet4Address;\nconst starkKeyPair0 = ec.getKeyPair(privateKey0);\nconst account0 = new Account(provider, account0Address, starkKeyPair0);\n\n// v5\nconst privateKey0 = accountTestnet4PrivateKey;\nconst account0Address: string = accountTestnet4Address;\nconst account0 = new Account(provider, account0Address, privateKey0);\n")),(0,r.kt)("p",null,"Derive partial public key (",(0,r.kt)("inlineCode",{parentName:"p"},"starknetPubKey"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// v4\nconst starknetPubKey = ec.getStarkKey(keyPair);\n\n// v5\nconst starknetPubKey = ec.starkCurve.getStarkKey(privateKey); // only X part of full pubKey\n")),(0,r.kt)("p",null,"Derive full public key (",(0,r.kt)("inlineCode",{parentName:"p"},"fullPubKey"),"):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// v4\nconst fullPubKey = encode.addHexPrefix(keyPair.getPublic("hex"));\n\n// v5\nconst fullPubKey = encode.addHexPrefix(encode.buf2hex(ec.starkCurve.getPublicKey(privateKey, false))); // full key\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ec.sign")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ec.verify"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// v4\nconst signature = ec.sign(keyPair, msgHash);\nconst isVerified = ec.verify(inferredKeyPair, msgHash, signature);\n\n// v5\nconst signature = ec.starkCurve.sign(msgHash, privateKey);\nconst verifStarknet = ec.starkCurve.verify(signature, msgHash, fullPubKeySource);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pedersen")," hash calculation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// v4\nconst hashMsg = hash.pedersen([account, price]);\n\n// v5\nconst hashMsg = ec.starkCurve.pedersen(account, price);\n")),(0,r.kt)("h2",{id:"declareanddeploy-renaming"},"'declare",(0,r.kt)("strong",{parentName:"h2"},"And"),"Deploy' renaming"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"account.declareDeploy()")," method has been renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"declareAndDeploy()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// v4\nconst response = await account0.declareDeploy({ contract: compiledTest, classHash: testClassHash });\n\n// v5\nconst response = await account0.declareAndDeploy({ contract: compiledHelloSierra, casm: compiledHelloCasm });\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: ",(0,r.kt)("inlineCode",{parentName:"p"},"declare")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"declareAndDeploy")," no longer require ",(0,r.kt)("inlineCode",{parentName:"p"},"classHash"),"! The new ec library is now able to calculate it quickly\nand does so automatically when it is not provided. If a contract has been written in Cairo 1 the ",(0,r.kt)("inlineCode",{parentName:"p"},"casm")," property is needed.")),(0,r.kt)("h2",{id:"calldata-and-returned-values"},"Calldata and returned values"),(0,r.kt)("p",null,"Deep modifications and improvements have been performed concerning exchange of data with the Cairo contract functions.\nThe complete new rules are listed in this ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/starknet.js/docs/guides/define_call_message"},"guide")),".",(0,r.kt)("br",{parentName:"p"}),"\n","In short, it is easier to construct a list of parameters while relying on the built-in verification of the conformity to the abi.",(0,r.kt)("br",{parentName:"p"}),"\n","Returned values from a Cairo 0 contract are identical, but returned values from a Cairo 1 contract are easier to recover."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"stark.compileCalldata()")," has been replaced by ",(0,r.kt)("inlineCode",{parentName:"p"},"CallData.compile()"),". Regardless, the new ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract.populate()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"myCallData.compile()")," methods are the recommended way to create calldata."),(0,r.kt)("h2",{id:"provider"},"Provider"),(0,r.kt)("p",null,"Constants for ",(0,r.kt)("inlineCode",{parentName:"p"},"Provider")," initialization have been updated:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// v4\nconst providerTestnet = new Provider({ sequencer: { network: "goerli-alpha" } });\n\n// v5\n const providerTestnet = new Provider({ sequencer: { network: constants.NetworkName.SN_GOERLI } }); // or SN_MAIN\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Provider.chainId()")," has been removed, ",(0,r.kt)("inlineCode",{parentName:"p"},"Provider.getChainId()")," should be used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// v4\nconst chainId = myProvider.chainId();\n\n// v5\nconst chainId = await myProvider.getChainId();\n")),(0,r.kt)("h2",{id:"uint256"},"Uint256"),(0,r.kt)("p",null,"The approach to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"uint256")," variable has changed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// v4\nconst amountIn = uint256.bnToUint256(amountToSwap);\n\n// v5\nconst amountIn: Uint256 = cairo.uint256(50000n);\n")),(0,r.kt)("h2",{id:"get-starknet"},"get-starknet"),(0,r.kt)("p",null,"In your DAPP React code you can connect to ArgentX or Braavos wallets using the ",(0,r.kt)("inlineCode",{parentName:"p"},"get-starknet")," library."),(0,r.kt)("p",null,"The current v2.1.0 version is not yet compatible with starknet.js v5.",(0,r.kt)("br",{parentName:"p"}),"\n","An update is expected."))}u.isMDXComponent=!0}}]);