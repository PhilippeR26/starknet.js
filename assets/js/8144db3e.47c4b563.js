"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[94844],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=r.createContext({}),s=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=s(t.components);return r.createElement(c.Provider,{value:e},t.children)},m="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,c=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),m=s(n),u=a,g=m["".concat(c,".").concat(u)]||m[u]||d[u]||i;return n?r.createElement(g,o(o({ref:e},p),{},{components:n})):r.createElement(g,o({ref:e},p))}));function g(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l[m]="string"==typeof t?t:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},29455:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:9},o="Data transformation",l={unversionedId:"guides/define_call_message",id:"version-4.22.0/guides/define_call_message",title:"Data transformation",description:"Cairo contracts and JavaScript/TypeScript languages do not have the same types of data.",source:"@site/versioned_docs/version-4.22.0/guides/define_call_message.md",sourceDirName:"guides",slug:"/guides/define_call_message",permalink:"/starknet.js/docs/4.22.0/guides/define_call_message",draft:!1,tags:[],version:"4.22.0",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Create account",permalink:"/starknet.js/docs/4.22.0/guides/create_account"},next:{title:"Estimate fees",permalink:"/starknet.js/docs/4.22.0/guides/estimate_fees"}},c={},s=[{value:"Types of data",id:"types-of-data",level:2},{value:"function argument types",id:"function-argument-types",level:2},{value:"Array of &lt; BigNumberish &gt;",id:"array-of--bignumberish-",level:3},{value:"Object",id:"object",level:3},{value:"Array of &lt; string &gt;",id:"array-of--string-",level:3},{value:"Array of &lt; any &gt;",id:"array-of--any-",level:3},{value:"summary table for arguments",id:"summary-table-for-arguments",level:3},{value:"Receive data from a Cairo contract",id:"receive-data-from-a-cairo-contract",level:2},{value:"Handle Strings:",id:"handle-strings",level:2},{value:"Encode ShortString:",id:"encode-shortstring",level:3},{value:"Decode ShortString:",id:"decode-shortstring",level:3},{value:"LongString",id:"longstring",level:3}],p={toc:s},m="wrapper";function d(t){let{components:e,...n}=t;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"data-transformation"},"Data transformation"),(0,a.kt)("p",null,"Cairo contracts and JavaScript/TypeScript languages do not have the same types of data."),(0,a.kt)("p",null,"So, it's necessary to prepare the data before sending them to a contract (for invoke/execute, or for a constructor)."),(0,a.kt)("p",null,"On the other side, when a contract sends data to your DAPP (result of a call), you also have to transform them before using them in your code."),(0,a.kt)("h2",{id:"types-of-data"},"Types of data"),(0,a.kt)("p",null,"In Cairo, everything is felt, an integer on 251 bits."),(0,a.kt)("p",null,"This type does not exist in JS/TS - you have Number, bigInt, string, array, objects... and types defined in libraries."),(0,a.kt)("p",null,"In Starknet.js, it's a bit ... complicated, you have the BigNumberish type and it can include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'String: "123", "0xabc2"'),(0,a.kt)("li",{parentName:"ul"},"Number (max 53 bits): 123"),(0,a.kt)("li",{parentName:"ul"},"BN (max 256 bits): BigNum from ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/indutny/bn.js/"},"BN.js")," \ud83e\udd2f.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To create a BigInt: ",(0,a.kt)("inlineCode",{parentName:"p"},"const myBigInt=BigInt(1234n);"),(0,a.kt)("br",{parentName:"p"}),"\n","To create a BN: ",(0,a.kt)("inlineCode",{parentName:"p"},'const myBN=new BN("0x12b4");'),(0,a.kt)("br",{parentName:"p"}),"\n","To convert a BigInt to BN: ",(0,a.kt)("inlineCode",{parentName:"p"},"const myBN=new BN(myBigInt.toString());"),(0,a.kt)("br",{parentName:"p"}),"\n","To convert a BN to BigInt: ",(0,a.kt)("inlineCode",{parentName:"p"},"const myBigInt=BigInt(myBN.toString());"))),(0,a.kt)("h2",{id:"function-argument-types"},"function argument types"),(0,a.kt)("p",null,"There are 4 different types of contract function arguments used in Starknet.js."),(0,a.kt)("h3",{id:"array-of--bignumberish-"},"Array of < BigNumberish >"),(0,a.kt)("p",null,"You have to create by yourself this array of < BigNumberish >, in respect with the order of the Cairo function parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const myCallData = [ // array of <BigNumberish>\n    123, // number 53 bits\n    "0x2345", // string\n    bn1, // BN\n    bi1.toString(), // BigInt converted to string\n    num1, // number 53 bits\n    initialUint256.low, initialUint256.high, //object converted to BigNumberish\n    coord.x0, coord.y0, coord.z0, //object converted to BigNumberish\n    shortString.encodeShortString(\'A\'),\n    2, "123", "0x2345" // an array of 2 felts\n];\n// in TypeScript, this object type is: `RawCalldata`\n')),(0,a.kt)("h3",{id:"object"},"Object"),(0,a.kt)("p",null,"You can list your parameters in an object:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The names of the object parameters are the names of the Cairo function parameters."),(0,a.kt)("li",{parentName:"ul"},"Simple types have to be converted in strings."),(0,a.kt)("li",{parentName:"ul"},"For an array, you have to use an array of strings."),(0,a.kt)("li",{parentName:"ul"},"For a Cairo struct, you have to code this way (example for an Uint256):",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("inlineCode",{parentName:"li"},"my_uint: { type: 'struct', low: initialUint256.low, high: initialUint256.high }"),".")),(0,a.kt)("p",null,"Example for a constructor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n    name: shortString.encodeShortString(\'MyToken\'),\n    symbol: shortString.encodeShortString(\'MTK\'),\n    decimals: "18",\n    initial_supply: { type: \'struct\', low: initialTk.low, high: initialTk.high },\n    recipient: account0.address,\n    owner: account0.address,\n    list:["678", "321", "7890"] // array of 3 cairo felts\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83d\udea8 In opposition with the object philosophy, your object content has to be ordered in respect with the order of the definition of the Cairo function parameters.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"You can't send an array of cairo struct with this object type.")),(0,a.kt)("h3",{id:"array-of--string-"},"Array of < string >"),(0,a.kt)("p",null,"You can create by yourself this array of < string >, in respect with the order of the Cairo function parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const myCallData = [\n    "123",\n    "0x2345",\n    bn1.toString(), // BN converted to string\n    bi1.toString(), // BigInt converted to string\n    number.toBN(num1).toString(), // Number 53 bits converted to string\n    initialUint256.low.toString(), initialUint256.high.toString(),\n    coord.x0.toString(), coord.y0.toString(), coord.z0.toString(),\n    shortString.encodeShortString(\'A\'),\n    "3", "52788", "123", "0x2345", // an array of 3 felts\n    "2", "100", "0", "234", "456" // an array of 2 Uint256\n];\n// in TypeScript, this object type is: `Calldata`\n')),(0,a.kt)("p",null,"Or you can use the function ",(0,a.kt)("inlineCode",{parentName:"p"},"stark.compileCalldata()"),", that converts an object type to an ",(0,a.kt)("inlineCode",{parentName:"p"},"array of string")," type."),(0,a.kt)("p",null,"For a cairo contract, with this constructor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cairo"},"func constructor{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(\n    name: felt, symbol: felt, decimals: felt, initial_supply: Uint256, recipient: felt, owner: felt\n)\n")),(0,a.kt)("p",null,"You will have to create in your code this set of data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const initialTk = uint256.bnToUint256(100);\nconst ERC20ConstructorCallData = stark.compileCalldata({\n    name: shortString.encodeShortString('MyToken'),\n    symbol: shortString.encodeShortString('MTK'),\n    decimals: \"18\",\n    initial_supply: { type: 'struct', low: initialTk.low, high: initialTk.high },\n    recipient: account0.address,\n    owner: account0.address\n});\n")),(0,a.kt)("h3",{id:"array-of--any-"},"Array of < any >"),(0,a.kt)("p",null,"With this type, you can include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"BigNumberish"),(0,a.kt)("li",{parentName:"ul"},"objects representing a Cairo struct"),(0,a.kt)("li",{parentName:"ul"},"arrays")),(0,a.kt)("p",null,"...in respect with the order of the Cairo function parameters."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const myCallData = [\n    123, // number 53 bits\n    "0x2345",\n    bn1, // BigNum\n    bi1.toString(), // Bigint converted to string\n    num1, // number 53 bits\n    initialUint256, // object representing a struct of 2 felt\n    coord, // object representing a struct of 3 felt\n    shortString.encodeShortString(\'A\'), // short string\n    [123, "0x2345"], // for an array of 2 cairo felts\n    [initialUint256, finallUint256] // for an array of 2 structs (Uint256 here)\n];\n// in TypeScript, the object type is: `Array<any>`\n')),(0,a.kt)("p",null,"Object representing a Cairo struct are made of ",(0,a.kt)("inlineCode",{parentName:"p"},"BigNumberish")," elements. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface c3D {\n    x0: BigNumberish;\n    y0: BigNumberish;\n    z0: BigNumberish;\n}\n")),(0,a.kt)("p",null,"Same for arrays - their elements must have the ",(0,a.kt)("inlineCode",{parentName:"p"},"BigNumberish")," type."),(0,a.kt)("h3",{id:"summary-table-for-arguments"},"summary table for arguments"),(0,a.kt)("p",null,"These 4 types of arguments can't be used at your convenience everywhere. Here is a table showing which types can be used in which function:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"right"},"Function"),(0,a.kt)("th",{parentName:"tr",align:"center"},"array of < BigNumberish >"),(0,a.kt)("th",{parentName:"tr",align:"center"},"array of < string >"),(0,a.kt)("th",{parentName:"tr",align:"center"},"object"),(0,a.kt)("th",{parentName:"tr",align:"center"},"array of < any >"),(0,a.kt)("th",{parentName:"tr",align:"center"},"MultiInvoke"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},(0,a.kt)("strong",{parentName:"td"},"TypeScript type")),(0,a.kt)("td",{parentName:"tr",align:"center"},"RawCalldata"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Calldata or RawArgs or RawCalldata"),(0,a.kt)("td",{parentName:"tr",align:"center"},"RawArgs"),(0,a.kt)("td",{parentName:"tr",align:"center"},"Array< any >"),(0,a.kt)("td",{parentName:"tr",align:"center"},"array")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"contract.call contract.metaClass"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u26a0\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"contract.invoke contract.metaClass"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u26a0\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"account.execute"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"account.deploy"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"account.deployContract"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"account.declareDeploy"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"account.deployAccount"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"right"},"hash.calculateContractAddressFromHash"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"}),(0,a.kt)("td",{parentName:"tr",align:"center"})))),(0,a.kt)("p",null,"\u26a0\ufe0f = only for a list of felt (no array or struct)."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"for TypeScript, you can import these type of data:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { type Calldata, type RawArgs } from "starknet";\nimport { type RawCalldata } from "starknet/dist/types/lib";\n')),(0,a.kt)("h2",{id:"receive-data-from-a-cairo-contract"},"Receive data from a Cairo contract"),(0,a.kt)("p",null,"When you perform a call, you have the result in an object:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"With a contract.call: ",(0,a.kt)("inlineCode",{parentName:"li"},'const result=contract.call("read_val", myParameters)'),"."),(0,a.kt)("li",{parentName:"ul"},"With a contract.meta-class: ",(0,a.kt)("inlineCode",{parentName:"li"},"const result=contract.read_val(...myParameters)"),".")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type in Cairo"),(0,a.kt)("th",{parentName:"tr",align:null},"Cairo code"),(0,a.kt)("th",{parentName:"tr",align:null},"Type expected in JS/TS"),(0,a.kt)("th",{parentName:"tr",align:null},"JS/TS function to recover data"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"felt (251 bits max)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"func getV()->(total:felt)")),(0,a.kt)("td",{parentName:"tr",align:null},"BN"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"const total = result.total"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"number (53 bits max)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"const total:number = parseInt(result.total)"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"string representing an hex number"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"const address:string = number.toHex(result.total)"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Uint256 (256 bits max)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"func getV()->(balance:Uint256)")),(0,a.kt)("td",{parentName:"tr",align:null},"BN"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"const balance = uint256.uint256toBN(result.balance)"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"array of felt"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"func getV()->(list_len:felt, list:felt*)")),(0,a.kt)("td",{parentName:"tr",align:null},"BN[]"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"const list= result.list"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"shortString (31 ASCII characters max)"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"func getV()->(title:felt)")),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"const title:string = shortString.decodeShortString(result.title)"))))),(0,a.kt)("h2",{id:"handle-strings"},"Handle Strings:"),(0,a.kt)("p",null,"In JavaScript/TypeScript, the max length of a string is nearly limitless. In Cairo, a string is limited to only 31 characters, and is called a ShortString."),(0,a.kt)("h3",{id:"encode-shortstring"},"Encode ShortString:"),(0,a.kt)("p",null,"From JS to Cairo, you need to encode this ShortString to a number on 248 bits:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const myText = "uri/pict/t38.jpg"; // 31 chars max\nconst encodedText: string = shortString.encodeShortString(myText);\n')),(0,a.kt)("p",null,'the result is Hex number string: "0x7572692f706963742f7433382e6a7067"'),(0,a.kt)("h3",{id:"decode-shortstring"},"Decode ShortString:"),(0,a.kt)("p",null,"From Cairo to JS, you need to decode a BN (big number) to a string of 31 character max."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'const myShortString= new BN("156113730760229877043789998731456835687"); // or result of a Contract.call\nconst myTextDecoded = shortString.decodeShortString(myShortString);\n')),(0,a.kt)("p",null,'the result is: "uri/pict/t38.jpg"'),(0,a.kt)("h3",{id:"longstring"},"LongString"),(0,a.kt)("p",null,"How to handle a string with more than 31 characters:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The Cairo contract has to manage this string as array of ShortString (array of felt)."),(0,a.kt)("li",{parentName:"ol"},"The JS code has to split/encode the string before call/invoke."),(0,a.kt)("li",{parentName:"ol"},"The JS code has to decode/merge the BNs received from a call.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'function splitString(myString: string): string[] {\n    const myShortStrings: string[] = [];\n    while (myString.length > 0) {\n        myShortStrings.push(myString.slice(0, 31));\n        myString = myString.slice(31);\n    }\n    return (myShortStrings);\n}\nlet myString = "uri:myProject/atosmotor/recurr/monkey148.jpg";\n// encoding\nconst myShortStrings = splitString(myString);\nconst myShortStringsEncoded = myShortStrings.map((shortStr) => {\n    return shortString.encodeShortString(shortStr)\n}); // to use as input in call/invoke/deploy\n\n// decoding from a call\n// receiving a BN[]\nconst stringsCoded: BN[] = result.token_uri;\nconst myShortStringsDecoded = stringsCoded.map((shortStr: BN) => {\n    return shortString.decodeShortString(shortStr.toString())\n});\nconst finalString = myShortStringsDecoded.join("");\n')))}d.isMDXComponent=!0}}]);