"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[85031],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),i=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,c=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=i(a),y=r,m=d["".concat(l,".").concat(y)]||d[y]||p[y]||c;return a?n.createElement(m,o(o({ref:t},u),{},{components:a})):n.createElement(m,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=a.length,o=new Array(c);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var i=2;i<c;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},33437:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>i});var n=a(87462),r=(a(67294),a(3905));const c={sidebar_position:8},o="Create account",s={unversionedId:"guides/create_account",id:"version-4.22.0/guides/create_account",title:"Create account",description:"Since there are no Externally Owned Accounts (EOA) in Starknet, all Accounts in Starknet are contracts.",source:"@site/versioned_docs/version-4.22.0/guides/create_account.md",sourceDirName:"guides",slug:"/guides/create_account",permalink:"/starknet.js/docs/4.22.0/guides/create_account",draft:!1,tags:[],version:"4.22.0",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Create new contract",permalink:"/starknet.js/docs/4.22.0/guides/create_contract"},next:{title:"Data transformation",permalink:"/starknet.js/docs/4.22.0/guides/define_call_message"}},l={},i=[{value:"Create OZ (Open Zeppelin) account:",id:"create-oz-open-zeppelin-account",level:2},{value:"compute address:",id:"compute-address",level:3},{value:"deployment of the new account",id:"deployment-of-the-new-account",level:3},{value:"Create Argent account",id:"create-argent-account",level:2},{value:"compute address",id:"compute-address-1",level:3},{value:"deployment of the new account",id:"deployment-of-the-new-account-1",level:3},{value:"Create your account abstraction",id:"create-your-account-abstraction",level:2}],u={toc:i},d="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"create-account"},"Create account"),(0,r.kt)("p",null,"Since there are no Externally Owned Accounts (EOA) in Starknet, all Accounts in Starknet are contracts."),(0,r.kt)("p",null,"Unlike in Ethereum where a wallet is created with a public and private key pair, Starknet Accounts are the only way to sign transactions and messages, and verify signatures. Therefore a Account - Contract interface is needed."),(0,r.kt)("p",null,"Account contracts on Starknet cannot be deployed without paying a fee.\nCreate an account is a bit tricky ; you have several steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Decide on your account type (OpenZeppelin, Argent, ...)."),(0,r.kt)("li",{parentName:"ol"},"Compute the address of your future account."),(0,r.kt)("li",{parentName:"ol"},"Send funds to this pre-computed address. The funds will be used to pay for the account contract deployment, and remains will fund the new account."),(0,r.kt)("li",{parentName:"ol"},"Actual deployment of the Account")),(0,r.kt)("h2",{id:"create-oz-open-zeppelin-account"},"Create OZ (Open Zeppelin) account:"),(0,r.kt)("p",null,"Here, we will create a wallet with the Open Zeppelin smart contract v0.5.1. The contract class is already implemented in both Testnet 1 & 2."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Account, ec, json, stark, Provider, hash } from "starknet";\n')),(0,r.kt)("h3",{id:"compute-address"},"compute address:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// connect provider\nconst provider = new Provider({ sequencer: { network: \"goerli-alpha\" } });\n\n// new Open Zeppelin account v0.5.1:\n    // Generate public and private key pair.\nconst privateKey = stark.randomAddress();\nconsole.log('New OZ account:\\nprivateKey=', privateKey);\nconst starkKeyPair = ec.getKeyPair(privateKey);\nconst starkKeyPub = ec.getStarkKey(starkKeyPair);\nconsole.log('publicKey=', starkKeyPub);\n\nconst OZaccountClassHash = \"0x2794ce20e5f2ff0d40e632cb53845b9f4e526ebd8471983f7dbd355b721d5a\";\n// Calculate future address of the account\nconst OZaccountConstructorCallData = stark.compileCalldata({ publicKey: starkKeyPub });\nconst OZcontractAddress = hash.calculateContractAddressFromHash(\n    starkKeyPub,\n    OZaccountClassHash,\n    OZaccountConstructorCallData,\n    0\n);\nconsole.log('Precalculated account address=', OZcontractAddress);\n")),(0,r.kt)("p",null,"If you want a specific private key, replace ",(0,r.kt)("inlineCode",{parentName:"p"},"stark.randomAddress()")," by your choice."),(0,r.kt)("p",null,"Then you have to fund this address!"),(0,r.kt)("p",null,"How to proceed is out of the scope of this guide, by you can for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Transfer ETH from another wallet."),(0,r.kt)("li",{parentName:"ul"},"Bridge ETH to this Starknet address."),(0,r.kt)("li",{parentName:"ul"},"Use a faucet. (",(0,r.kt)("a",{parentName:"li",href:"https://faucet.goerli.starknet.io/"},"https://faucet.goerli.starknet.io/"),")"),(0,r.kt)("li",{parentName:"ul"},"Mint ETH on starknet-devnet, like so:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST http://127.0.0.1:5050/mint -d \'{"address":"0x04a093c37ab61065d001550089b1089922212c60b34e662bb14f2f91faee2979","amount":50000000000000000000,"lite":true}\' -H "Content-Type:application/json"\n// {"new_balance":50000000000000000000,"tx_hash":null,"unit":"wei"}\n')),(0,r.kt)("h3",{id:"deployment-of-the-new-account"},"deployment of the new account"),(0,r.kt)("p",null,"If you have sent enough fund to this new address, you can go forward to the final step:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const OZaccount = new Account(provider, OZcontractAddress, starkKeyPair);\n\nconst { transaction_hash, contract_address } = await OZaccount.deployAccount({\n    classHash: OZaccountClassHash,\n    constructorCalldata: OZaccountConstructorCallData,\n    addressSalt: starkKeyPub\n});\n\nawait provider.waitForTransaction(transaction_hash);\nconsole.log('\u2705 New OpenZeppelin account created.\\n   address =', contract_address);\n")),(0,r.kt)("h2",{id:"create-argent-account"},"Create Argent account"),(0,r.kt)("p",null,"Here, we will create a wallet with the Argent smart contract v0.2.3. This case is more complicated, because we will have the wallet behind a proxy contract (this way, the wallet contract can be updated). The contract classes of both contracts are already implemented in both Testnet 1 & 2."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If necessary OZ contracts can also be created with a proxy.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Account, ec, json, stark, Provider, hash } from "starknet";\n')),(0,r.kt)("h3",{id:"compute-address-1"},"compute address"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// connect provider\nconst provider = new Provider({ sequencer: { network: "goerli-alpha" } });\n\n//new Argent X account v0.2.3:\nconst argentXproxyClassHash = "0x25ec026985a3bf9d0cc1fe17326b245dfdc3ff89b8fde106542a3ea56c5a918";\nconst argentXaccountClassHash = "0x033434ad846cdd5f23eb73ff09fe6fddd568284a0fb7d1be20ee482f044dabe2";\n\n// Generate public and private key pair.\nconst privateKeyAX = stark.randomAddress();\nconsole.log(\'AX_ACCOUNT_PRIVATE_KEY=\', privateKeyAX);\nconst starkKeyPairAX = ec.getKeyPair(privateKeyAX);\nconst starkKeyPubAX = ec.getStarkKey(starkKeyPairAX);\nconsole.log(\'AX_ACCOUNT_PUBLIC_KEY=\', starkKeyPubAX);\n\n// Calculate future address of the ArgentX account\nconst AXproxyConstructorCallData = stark.compileCalldata({\n    implementation: argentXaccountClassHash,\n    selector: hash.getSelectorFromName("initialize"),\n    calldata: stark.compileCalldata({ signer: starkKeyPubAX, guardian: "0" }),\n});\nconst AXcontractAddress = hash.calculateContractAddressFromHash(\n    starkKeyPubAX,\n    argentXproxyClassHash,\n    AXproxyConstructorCallData,\n    0\n);\nconsole.log(\'Precalculated account address=\', AXcontractAddress);\n')),(0,r.kt)("p",null,"If you want a specific private key, replace ",(0,r.kt)("inlineCode",{parentName:"p"},"stark.randomAddress()")," by your choice."),(0,r.kt)("p",null,"Then you have to fund this address."),(0,r.kt)("h3",{id:"deployment-of-the-new-account-1"},"deployment of the new account"),(0,r.kt)("p",null,"If you have sent enough fund to this new address, you can go forward to the final step:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const accountAX = new Account(provider, AXcontractAddress, starkKeyPairAX);\n\nconst deployAccountPayload = {\n    classHash: argentXproxyClassHash,\n    constructorCalldata: AXproxyConstructorCallData,\n    contractAddress: AXcontractAddress,\n    addressSalt: starkKeyPubAX };\n\nconst { transaction_hash: AXdAth, contract_address: AXcontractFinalAddress } = await accountAX.deployAccount(deployAccountPayload);\nconsole.log('\u2705 ArgentX wallet deployed at:', AXcontractFinalAddress);\n")),(0,r.kt)("h2",{id:"create-your-account-abstraction"},"Create your account abstraction"),(0,r.kt)("p",null,"You are not limited to OZ or Argent contracts. You can create your own contract for wallet. It's the concept of Account Abstraction."),(0,r.kt)("p",null,"You can customize entirely the wallet - for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"use a different concept of keys.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"add a guardian to save your account.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"have the possibility to transfer the ownership of the wallet.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"add some administrators or a super-administrator.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"whitelist of address for transfer.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"multisig"))),(0,r.kt)("p",null,"The only limitation is your imagination..."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Prior to the declaration of the contract, do not forget to read the compiled contract with ",(0,r.kt)("inlineCode",{parentName:"p"},"json.parse"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'const compiledAAaccount = json.parse(fs.readFileSync("./compiled_contracts/myAccountAbstraction.json").toString("ascii")\n')),(0,r.kt)("p",null,"Here is an example of a customized wallet, including super administrator management, on a local starknet-devnet:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"launch ",(0,r.kt)("inlineCode",{parentName:"p"},"starknet-devnet --seed 0")," before using this script")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Account, ec, json, stark, Provider, hash } from "starknet";\nimport axios from "axios";\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// connect provider\nconst provider = new Provider({ sequencer: { network: "http://127.0.0.1:5050" } });\n\n// initialize existing predeployed account 0 of Devnet\nconst privateKey0 = "0xe3e70682c2094cac629f6fbed82c07cd";\nconst starkKeyPair0 = ec.getKeyPair(privateKey0);\nconst accountAddress0 = "0x7e00d496e324876bbc8531f2d9a82bf154d1a04a50218ee74cdd372f75a551a";\nconst account0 = new Account(provider, accountAddress0, starkKeyPair0);\n\n// new account abstraction:\n// Generate public and private key pair.\nconst AAprivateKey = stark.randomAddress();\nconsole.log(\'New account:\\nprivateKey=\', AAprivateKey);\nconst AAstarkKeyPair = ec.getKeyPair(AAprivateKey);\nconst AAstarkKeyPub = ec.getStarkKey(AAstarkKeyPair);\nconsole.log(\'publicKey=\', AAstarkKeyPub);\n\n// declare the contract\nconst compiledAAaccount = json.parse(fs.readFileSync("./compiled_contracts/myAccountAbstraction.json").toString("ascii");\nconst AAaccountClassHash = "0x5139780c7ec8246e21a22e49f4fa0ce430237df4a4b241214a3a5a5c120120d";\nconst { transaction_hash: declTH, class_hash: decCH } = await account0.declare({\n    classHash: AAaccountClassHash,\n    contract: compiledAAaccount\n});\nconsole.log(\'Customized account class hash =\', decCH);\nawait provider.waitForTransaction(declTH);\n\n// Calculate future address of the account\nconst AAaccountConstructorCallData = stark.compileCalldata({\n    super_admin_address: account0.address,\n    publicKey: AAstarkKeyPub\n});\nconst AAcontractAddress = hash.calculateContractAddressFromHash(\n    AAstarkKeyPub,\n    AAaccountClassHash,\n    AAaccountConstructorCallData,\n    0\n);\nconsole.log(\'Precalculated account address=\', AAcontractAddress);\n\n// fund account address before account creation\nconst { data: answer } = await axios.post(\'http://127.0.0.1:5050/mint\', { "address": AAcontractAddress, "amount": 50_000_000_000_000_000_000, "lite": true }, { headers: { "Content-Type": "application/json" } });\nconsole.log(\'Answer mint =\', answer);\n\n// deploy account\nconst AAaccount = new Account(provider, AAcontractAddress, AAstarkKeyPair);\nconst { transaction_hash, contract_address } = await AAaccount.deployAccount({\n    classHash: AAaccountClassHash,\n    constructorCalldata: AAaccountConstructorCallData,\n    addressSalt: AAstarkKeyPub\n});\nawait provider.waitForTransaction(transaction_hash);\nconsole.log(\'\u2705 New customized account created.\\n   address =\', contract_address);\n')),(0,r.kt)("p",null,"The pre-computed address has been funded automatically by minting new dummy ETH in Starknet devnet!"))}p.isMDXComponent=!0}}]);