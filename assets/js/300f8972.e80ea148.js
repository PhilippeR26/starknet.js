"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[66050],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(i,".").concat(m)]||d[m]||k[m]||s;return n?a.createElement(g,l(l({ref:t},c),{},{components:n})):a.createElement(g,l({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},34354:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>k,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const s={sidebar_position:1},l="Provider",o={unversionedId:"API/provider",id:"version-4.17.1/API/provider",title:"Provider",description:"The Provider API allows you to interact with the Starknet network, without signing transactions or messages.",source:"@site/versioned_docs/version-4.17.1/API/provider.md",sourceDirName:"API",slug:"/API/provider",permalink:"/starknet.js/docs/4.17.1/API/provider",draft:!1,tags:[],version:"4.17.1",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Starknet.js API",permalink:"/starknet.js/docs/4.17.1/API/"},next:{title:"Account",permalink:"/starknet.js/docs/4.17.1/API/account"}},i={},p=[{value:"Default Provider",id:"default-provider",level:2},{value:"Creating an instance",id:"creating-an-instance",level:3},{value:"Methods",id:"methods",level:3},{value:"getChainId()",id:"getchainid",level:4},{value:"callContract()",id:"callcontract",level:4},{value:"<em>CallContractResponse</em>",id:"callcontractresponse",level:6},{value:"getBlock()",id:"getblock",level:4},{value:"<em>GetBlockResponse</em>",id:"getblockresponse",level:6},{value:"getClassAt()",id:"getclassat",level:4},{value:"<em>ContractClass</em>",id:"contractclass",level:6},{value:"getInvokeEstimateFee()",id:"getinvokeestimatefee",level:4},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse",level:6},{value:"getNonceForAddress()",id:"getnonceforaddress",level:4},{value:"getStorageAt()",id:"getstorageat",level:4},{value:"getTransactionReceipt()",id:"gettransactionreceipt",level:4},{value:"<em>GetTransactionReceiptResponse</em>",id:"gettransactionreceiptresponse",level:6},{value:"getTransaction()",id:"gettransaction",level:4},{value:"<em>GetTransactionResponse</em>",id:"gettransactionresponse",level:6},{value:"declareContract()",id:"declarecontract",level:4},{value:"<em>DeclareContractResponse</em>",id:"declarecontractresponse",level:6},{value:"getDeclareEstimateFee()",id:"getdeclareestimatefee",level:4},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse-1",level:6},{value:"waitForTransaction()",id:"waitfortransaction",level:4},{value:"SequencerProvider",id:"sequencerprovider",level:2},{value:"Creating an instance",id:"creating-an-instance-1",level:3},{value:"Methods",id:"methods-1",level:3},{value:"getContractAddresses()",id:"getcontractaddresses",level:4},{value:"<em>GetContractAddressesResponse</em>",id:"getcontractaddressesresponse",level:6},{value:"getCode()",id:"getcode",level:4},{value:"<em>GetCodeResponse</em>",id:"getcoderesponse",level:6},{value:"estimateMessageFee()",id:"estimatemessagefee",level:4},{value:"<em>CallL1Handler</em>",id:"calll1handler",level:5},{value:"getTransactionStatus()",id:"gettransactionstatus",level:4},{value:"<em>GetTransactionStatusResponse</em>",id:"gettransactionstatusresponse",level:6},{value:"getTransactionTrace()",id:"gettransactiontrace",level:4},{value:"<em>GetTransactionTraceResponse</em>",id:"gettransactiontraceresponse",level:6},{value:"RpcProvider",id:"rpcprovider",level:2},{value:"Creating an instance",id:"creating-an-instance-2",level:3},{value:"Methods",id:"methods-2",level:3},{value:"fetch()",id:"fetch",level:4},{value:"getChainId()",id:"getchainid-1",level:4},{value:"getBlock()",id:"getblock-1",level:4},{value:"getBlockHashAndNumber()",id:"getblockhashandnumber",level:4},{value:"<em>BlockHashAndNumber</em>",id:"blockhashandnumber",level:6},{value:"getBlockWithTxHashes()",id:"getblockwithtxhashes",level:4},{value:"<em>GetBlockWithTxHashesResponse</em>",id:"getblockwithtxhashesresponse",level:6},{value:"getBlockWithTxs()",id:"getblockwithtxs",level:4},{value:"<em>GetBlockWithTxs</em>",id:"getblockwithtxs-1",level:6},{value:"getClassHashAt()",id:"getclasshashat",level:4},{value:"getTransactionCount()",id:"gettransactioncount",level:4},{value:"getBlockNumber()",id:"getblocknumber",level:4},{value:"getPendingTransactions()",id:"getpendingtransactions",level:4},{value:"<em>PendingTransactions</em>",id:"pendingtransactions",level:6},{value:"getStateUpdate()",id:"getstateupdate",level:4},{value:"<em>StateUpdate</em>",id:"stateupdate",level:6},{value:"getStorageAt()",id:"getstorageat-1",level:4},{value:"getTransaction()",id:"gettransaction-1",level:4},{value:"getTransactionByHash()",id:"gettransactionbyhash",level:4},{value:"<em>GetTransactionByHashResponse</em>",id:"gettransactionbyhashresponse",level:6},{value:"getTransactionByBlockIdAndIndex()",id:"gettransactionbyblockidandindex",level:4},{value:"<em>GetTransactionByBlockIdAndIndex</em>",id:"gettransactionbyblockidandindex-1",level:6},{value:"getTransactionReceipt()",id:"gettransactionreceipt-1",level:4},{value:"getClass()",id:"getclass",level:4},{value:"<em>ContractClass</em>",id:"contractclass-1",level:6},{value:"getClassAt()",id:"getclassat-1",level:4},{value:"<em>ContractClass</em>",id:"contractclass-2",level:6},{value:"getInvokeEstimateFee()",id:"getinvokeestimatefee-1",level:4},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse-2",level:6},{value:"getDeclareEstimateFee()",id:"getdeclareestimatefee-1",level:4},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse-3",level:6},{value:"declareContract()",id:"declarecontract-1",level:4},{value:"<em>DeclareContractResponse</em>",id:"declarecontractresponse-1",level:6},{value:"callContract()",id:"callcontract-1",level:4},{value:"getContractAddresses()",id:"getcontractaddresses-1",level:4},{value:"<em>Trace</em>",id:"trace",level:6},{value:"traceBlockTransactions()",id:"traceblocktransactions",level:4},{value:"<em>Traces</em>",id:"traces",level:6},{value:"getSyncingStats()",id:"getsyncingstats",level:4},{value:"<em>GetSyncingStatsResponse</em>",id:"getsyncingstatsresponse",level:6},{value:"getEvents()",id:"getevents",level:4},{value:"<em>EventFilter</em>",id:"eventfilter",level:5},{value:"<em>GetEventsResponse</em>",id:"geteventsresponse",level:6}],c={toc:p},d="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"provider"},"Provider"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Provider")," API allows you to interact with the Starknet network, without signing transactions or messages."),(0,r.kt)("p",null,"Typically, these are ",(0,r.kt)("em",{parentName:"p"},"read")," calls on the blockchain."),(0,r.kt)("h2",{id:"default-provider"},"Default Provider"),(0,r.kt)("h3",{id:"creating-an-instance"},"Creating an instance"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"new starknet.Provider(optionsOrProvider)")),(0,r.kt)("p",null,"The options for the provider depend on the network. The structure of the options object is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"sequencer")," - Options for sequencer provider"),(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"rpc")," - Options for RPC provider")),(0,r.kt)("p",null,"The easiest way to get started is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const provider = new starknet.Provider()\n")),(0,r.kt)("p",null,"The above snippet creates a Starknet Provider instance with testnet ",(0,r.kt)("inlineCode",{parentName:"p"},"SN_GOERLI")," network."),(0,r.kt)("p",null,"However, if you want to use mainnet ",(0,r.kt)("inlineCode",{parentName:"p"},"SN_MAIN")," or explicitly declare the network, you can use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const provider = new starknet.Provider({\n  sequencer: {\n    network: NetworkName.SN_MAIN // or NetworkName.SN_GOERLI\n  }\n})\n")),(0,r.kt)("p",null,"If you want more control:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const provider = new starknet.Provider({\n  sequencer: {\n    baseUrl: BaseUrl.SN_GOERLI,\n    feederGatewayUrl: 'feeder_gateway',\n    gatewayUrl: 'gateway',\n  }\n})\n")),(0,r.kt)("p",null,"These are also the default options for the Provider constructor with ",(0,r.kt)("inlineCode",{parentName:"p"},"network: 'SN_GOERLI'"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note")),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"network")," argument should work in most cases. If you want to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sequencer")," argument with ",(0,r.kt)("inlineCode",{parentName:"p"},"baseUrl"),", you will not be able to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"network")," field in the object.")),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("h4",{id:"getchainid"},"getChainId()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getChainId"),"() => ",(0,r.kt)("em",{parentName:"p"},"Promise < StarknetChainId >")),(0,r.kt)("p",null,"Returns the chain Id for the current network."),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"callcontract"},"callContract()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"callContract"),"(call ","[ , blockIdentifier ]",") => ",(0,r.kt)("em",{parentName:"p"},"Promise < CallContractResponse >")),(0,r.kt)("p",null,"Calls a function on the Starknet contract."),(0,r.kt)("p",null,"The call object structure:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"call.",(0,r.kt)("strong",{parentName:"li"},"contractAddress")," - Address of the contract"),(0,r.kt)("li",{parentName:"ul"},"call.",(0,r.kt)("strong",{parentName:"li"},"entrypoint")," - Entrypoint of the call (method name)"),(0,r.kt)("li",{parentName:"ul"},"call.",(0,r.kt)("strong",{parentName:"li"},"calldata")," - Payload for the invoking method")),(0,r.kt)("h6",{id:"callcontractresponse"},(0,r.kt)("em",{parentName:"h6"},"CallContractResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  result: string[];\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getblock"},"getBlock()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getBlock"),"(blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetBlockResponse >")),(0,r.kt)("p",null,"Gets the block information."),(0,r.kt)("h6",{id:"getblockresponse"},(0,r.kt)("em",{parentName:"h6"},"GetBlockResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  accepted_time: number;\n  block_hash: string;\n  block_number: number;\n  gas_price: string;\n  new_root: string;\n  old_root?: string;\n  parent_hash: string;\n  sequencer: string;\n  status: 'NOT_RECEIVED' | 'RECEIVED' | 'PENDING' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1' | 'REJECTED';\n  transactions: Array<string>;\n  starknet_version?: string;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getclassat"},"getClassAt()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getClassAt"),"(contractAddress, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < ContractClass >")),(0,r.kt)("p",null,"Gets the contract class of the deployed contract."),(0,r.kt)("h6",{id:"contractclass"},(0,r.kt)("em",{parentName:"h6"},"ContractClass")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  program: CompressedProgram;\n  entry_points_by_type: EntryPointsByType;\n  abi?: Abi;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getinvokeestimatefee"},"getInvokeEstimateFee()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getInvokeEstimateFee"),"(invocationWithTxType, invocationDetails, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,r.kt)("p",null,"Estimate fee for invoke transaction."),(0,r.kt)("h6",{id:"estimatefeeresponse"},(0,r.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getnonceforaddress"},"getNonceForAddress()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getNonceForAddress"),"(contractAddress, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < BigNumberish >")),(0,r.kt)("p",null,"Gets the nonce of the provided contractAddress. This was renamed from ",(0,r.kt)("inlineCode",{parentName:"p"},"getNonce")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"getNonceForAddress")," to avoid confusion when inheriting an Account from the Provider class."),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getstorageat"},"getStorageAt()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getStorageAt"),"(contractAddress, key, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < string >")),(0,r.kt)("p",null,"Gets the contract's storage variable at a specific key."),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"gettransactionreceipt"},"getTransactionReceipt()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getTransactionReceipt"),"(txHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetTransactionReceiptResponse >")),(0,r.kt)("p",null,"Gets the status of a transaction."),(0,r.kt)("h6",{id:"gettransactionreceiptresponse"},(0,r.kt)("em",{parentName:"h6"},"GetTransactionReceiptResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transaction_hash: string;\n  status: 'NOT_RECEIVED' | 'RECEIVED' | 'PENDING' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1' | 'REJECTED';\n  actual_fee?: string;\n  status_data?: string;\n  messages_sent?: Array<MessageToL1>;\n  events?: Array<Event>;\n  l1_origin_message?: MessageToL2;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"gettransaction"},"getTransaction()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getTransaction"),"(txHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetTransactionResponse >")),(0,r.kt)("p",null,"Gets the transaction information from a tx hash."),(0,r.kt)("h6",{id:"gettransactionresponse"},(0,r.kt)("em",{parentName:"h6"},"GetTransactionResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transaction_hash: string;\n  version?: string;\n  signature?: Signature;\n  max_fee?: string;\n  nonce?: string;\n  contract_address?: string;\n  entry_point_selector?: string;\n  calldata?: RawCalldata;\n  contract_class?: ContractClass;\n  sender_address?: string;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"declarecontract"},"declareContract()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"declareContract"),"(transaction, details) => ",(0,r.kt)("em",{parentName:"p"},"Promise < DeclareContractResponse >")),(0,r.kt)("p",null,"Declare a contract on Starknet."),(0,r.kt)("h6",{id:"declarecontractresponse"},(0,r.kt)("em",{parentName:"h6"},"DeclareContractResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transaction_hash: string;\n  class_hash: string;\n};\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getdeclareestimatefee"},"getDeclareEstimateFee()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getDeclareEstimateFee"),"(transaction, details, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,r.kt)("p",null,"Estimate fee for declare transaction."),(0,r.kt)("h6",{id:"estimatefeeresponse-1"},(0,r.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n};\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"waitfortransaction"},"waitForTransaction()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"waitForTransaction"),"(txHash ","[ , options]",") => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetTransactionReceiptResponse >")),(0,r.kt)("p",null,"Wait for the transaction to be accepted on L2 or L1."),(0,r.kt)("h2",{id:"sequencerprovider"},"SequencerProvider"),(0,r.kt)("p",null,"On top of methods found in the ",(0,r.kt)("a",{parentName:"p",href:"#default-provider"},"Default Provider")," section, ",(0,r.kt)("inlineCode",{parentName:"p"},"SequencerProvider")," has some additional ones you can use."),(0,r.kt)("h3",{id:"creating-an-instance-1"},"Creating an instance"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"new starknet.SequencerProvider(optionsOrProvider)")),(0,r.kt)("p",null,"The options for the provider depend on the network. The structure of the options object is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"baseUrl")," - Base URL of the network"),(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"feederGatewayUrl")," - Feeder Gateway Endpoint of the network"),(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"gatewayUrl")," - Gateway Endpoint"),(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"headers")," - ","[Optional]"," custom fetch headers")),(0,r.kt)("p",null,"or"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"network")," - NetworkName"),(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"headers")," - ","[Optional]"," custom fetch headers")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const provider = new starknet.SequencerProvider({\n  baseUrl: BaseUrl.SN_GOERLI,\n  feederGatewayUrl: 'feeder_gateway',\n  gatewayUrl: 'gateway',\n})\n")),(0,r.kt)("h3",{id:"methods-1"},"Methods"),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getcontractaddresses"},"getContractAddresses()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getContractAddresses"),"() => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetContractAddressesResponse >")),(0,r.kt)("p",null,"Gets the smart contract address on the network."),(0,r.kt)("h6",{id:"getcontractaddressesresponse"},(0,r.kt)("em",{parentName:"h6"},"GetContractAddressesResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  Starknet: string;\n  GpsStatementVerifier: string;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getcode"},"getCode()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getCode"),"(contractAddress, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetCodeResponse >")),(0,r.kt)("p",null,"Gets the smart contract address on the network."),(0,r.kt)("h6",{id:"getcoderesponse"},(0,r.kt)("em",{parentName:"h6"},"GetCodeResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  bytecode: string[];\n  abi: Abi;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"estimatemessagefee"},"estimateMessageFee()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"estimateMessageFee"),"(CallL1Handler, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,r.kt)("p",null,"Estimate fee for sending a message to L1."),(0,r.kt)("h5",{id:"calll1handler"},(0,r.kt)("em",{parentName:"h5"},"CallL1Handler")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type CallL1Handler = {\n  from_address: getDecimalString(from_address),\n  to_address: getHexString(to_address),\n  entry_point_selector: getSelector(entry_point_selector),\n  payload: getHexStringArray(payload),\n};\n\n###### _EstimateFeeResponse_\n\n```typescript\n{\n  overall_fee: number;\n  gas_price: number;\n  gas_usage: number;\n  unit: string;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"gettransactionstatus"},"getTransactionStatus()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getTransactionStatus"),"(txHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetTransactionStatusResponse >")),(0,r.kt)("p",null,"Gets the status of a transaction."),(0,r.kt)("h6",{id:"gettransactionstatusresponse"},(0,r.kt)("em",{parentName:"h6"},"GetTransactionStatusResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  tx_status: 'NOT_RECEIVED' | 'RECEIVED' | 'PENDING' | 'ACCEPTED_ON_L2' | 'ACCEPTED_ON_L1' | 'REJECTED';\n  block_hash: string;\n  tx_failure_reason?: {\n    tx_id: number;\n    code: string;\n    error_message: string;\n  }\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"gettransactiontrace"},"getTransactionTrace()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getTransactionTrace"),"(txHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetTransactionTraceResponse >")),(0,r.kt)("p",null,"Gets the transaction trace from a tx hash."),(0,r.kt)("h6",{id:"gettransactiontraceresponse"},(0,r.kt)("em",{parentName:"h6"},"GetTransactionTraceResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  validate_invocation?: FunctionInvocation;\n  function_invocation?: FunctionInvocation;\n  fee_transfer_invocation?: FunctionInvocation;\n  signature: Signature;\n}\n\n{\n  FunctionInvocation: {\n    caller_address: string;\n    contract_address: string;\n    calldata: {\n      [inputName: string]: string | string[] | { type: 'struct'; [k: string]: BigNumberish };\n    };\n    call_type?: string;\n    class_hash?: string;\n    selector?: string;\n    entry_point_type?: EntryPointType;\n    result: Array<any>;\n    execution_resources: ExecutionResources;\n    internal_calls: Array<FunctionInvocation>;\n    events: Array<any>;\n    messages: Array<any>;\n  };\n}\n")),(0,r.kt)("h2",{id:"rpcprovider"},"RpcProvider"),(0,r.kt)("h3",{id:"creating-an-instance-2"},"Creating an instance"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"new starknet.RpcProvider(options)")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"nodeUrl")," - Starknet RPC node url"),(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"headers")," - ","[Optional]"," custom fetch headers"),(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"retries")," - ","[Optional]"," wait for transaction max retries"),(0,r.kt)("li",{parentName:"ul"},"options.",(0,r.kt)("strong",{parentName:"li"},"blockIdentifier")," - ","[Optional]"," default value set to 'latest'")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const provider = new starknet.RpcProvider({\n  nodeUrl: 'URL_TO_STARKNET_RPC_NODE',\n})\n")),(0,r.kt)("h3",{id:"methods-2"},"Methods"),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"fetch"},"fetch()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"fetch"),"(method: any, params: any) => ",(0,r.kt)("em",{parentName:"p"},"Promise < any >")),(0,r.kt)("p",null,"Generic method for users to be able to experiment with RPC methods."),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getchainid-1"},"getChainId()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getChainId"),"() => ",(0,r.kt)("em",{parentName:"p"},"Promise < any >")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getblock-1"},"getBlock()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getBlock"),"(blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetBlockResponse >")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getblockhashandnumber"},"getBlockHashAndNumber()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getBlockHashAndNumber"),"() => ",(0,r.kt)("em",{parentName:"p"},"Promise < BlockHashAndNumber >")),(0,r.kt)("h6",{id:"blockhashandnumber"},(0,r.kt)("em",{parentName:"h6"},"BlockHashAndNumber")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  block_hash: BLOCK_HASH;\n  block_number: BLOCK_NUMBER;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getblockwithtxhashes"},"getBlockWithTxHashes()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getBlockWithTxHashes"),"(blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetBlockWithTxHashesResponse >")),(0,r.kt)("h6",{id:"getblockwithtxhashesresponse"},(0,r.kt)("em",{parentName:"h6"},"GetBlockWithTxHashesResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.BlockWithTxHashes\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getblockwithtxs"},"getBlockWithTxs()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getBlockWithTxs"),"(blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetBlockWithTxs >")),(0,r.kt)("h6",{id:"getblockwithtxs-1"},(0,r.kt)("em",{parentName:"h6"},"GetBlockWithTxs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.BlockWithTxs\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getclasshashat"},"getClassHashAt()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getClassHashAt"),"(blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < ContractAddress >")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"gettransactioncount"},"getTransactionCount()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getTransactionCount"),"(blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < number >")),(0,r.kt)("p",null,"Gets the transaction count from a block."),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getblocknumber"},"getBlockNumber()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getBlockNumber"),"() => ",(0,r.kt)("em",{parentName:"p"},"Promise < number >")),(0,r.kt)("p",null,"Gets the latest block number."),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getpendingtransactions"},"getPendingTransactions()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getPendingTransactions"),"() => ",(0,r.kt)("em",{parentName:"p"},"Promise < PendingTransactions >")),(0,r.kt)("h6",{id:"pendingtransactions"},(0,r.kt)("em",{parentName:"h6"},"PendingTransactions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.PendingTransactions;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getstateupdate"},"getStateUpdate()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getStateUpdate"),"(blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < StateUpdate >")),(0,r.kt)("h6",{id:"stateupdate"},(0,r.kt)("em",{parentName:"h6"},"StateUpdate")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.StateUpdate;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getstorageat-1"},"getStorageAt()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getStorageAt"),"(contractAddress, key, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < BigNumberish >")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"gettransaction-1"},"getTransaction()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getTransaction"),"(txHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetTransactionResponse >")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"gettransactionbyhash"},"getTransactionByHash()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getTransactionByHash"),"(txHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetTransactionByHashResponse >")),(0,r.kt)("h6",{id:"gettransactionbyhashresponse"},(0,r.kt)("em",{parentName:"h6"},"GetTransactionByHashResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.Transaction;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"gettransactionbyblockidandindex"},"getTransactionByBlockIdAndIndex()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getTransactionByBlockIdAndIndex"),"(blockIdentifier, index) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetTransactionByBlockIdAndIndex >")),(0,r.kt)("h6",{id:"gettransactionbyblockidandindex-1"},(0,r.kt)("em",{parentName:"h6"},"GetTransactionByBlockIdAndIndex")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.Transaction;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"gettransactionreceipt-1"},"getTransactionReceipt()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getTransactionReceipt"),"(txHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetTransactionReceiptResponse >")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getclass"},"getClass()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getClass"),"(classHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < ContractClass >")),(0,r.kt)("h6",{id:"contractclass-1"},(0,r.kt)("em",{parentName:"h6"},"ContractClass")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.ContractClass;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getclassat-1"},"getClassAt()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getClassAt"),"(contractAddress, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < ContractClass >")),(0,r.kt)("h6",{id:"contractclass-2"},(0,r.kt)("em",{parentName:"h6"},"ContractClass")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.ContractClass;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getinvokeestimatefee-1"},"getInvokeEstimateFee()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getInvokeEstimateFee"),"(invocation, invocationDetails, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,r.kt)("h6",{id:"estimatefeeresponse-2"},(0,r.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getdeclareestimatefee-1"},"getDeclareEstimateFee()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getDeclareEstimateFee"),"(DeclareContractTransaction, details, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,r.kt)("h6",{id:"estimatefeeresponse-3"},(0,r.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"declarecontract-1"},"declareContract()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"declareContract"),"(DeclareContractTransaction, details) => ",(0,r.kt)("em",{parentName:"p"},"Promise < DeclareContractResponse >")),(0,r.kt)("h6",{id:"declarecontractresponse-1"},(0,r.kt)("em",{parentName:"h6"},"DeclareContractResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"  transaction_hash: string;\n  class_hash: string;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"callcontract-1"},"callContract()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"callContract"),"(call, blockIdentifier) => ",(0,r.kt)("em",{parentName:"p"},"Promise < CallContractResponse >")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getcontractaddresses-1"},"getContractAddresses()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"traceTransaction"),"(transactionHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < Trace >")),(0,r.kt)("h6",{id:"trace"},(0,r.kt)("em",{parentName:"h6"},"Trace")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.Trace;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"traceblocktransactions"},"traceBlockTransactions()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"traceBlockTransactions"),"(blockHash) => ",(0,r.kt)("em",{parentName:"p"},"Promise < Traces >")),(0,r.kt)("h6",{id:"traces"},(0,r.kt)("em",{parentName:"h6"},"Traces")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"OPENRPC.Traces;\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getsyncingstats"},"getSyncingStats()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getSyncingStats"),"() => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetSyncingStatsResponse >")),(0,r.kt)("p",null,"Gets syncing status of the node."),(0,r.kt)("h6",{id:"getsyncingstatsresponse"},(0,r.kt)("em",{parentName:"h6"},"GetSyncingStatsResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"boolean |\n{\n  starting_block_hash: string;\n  starting_block_num: string;\n  current_block_hash: string;\n  current_block_num: string;\n  highest_block_hash: string;\n  highest_block_num: string;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"getevents"},"getEvents()"),(0,r.kt)("p",null,"provider.",(0,r.kt)("strong",{parentName:"p"},"getEvents"),"(eventFilter) => ",(0,r.kt)("em",{parentName:"p"},"Promise < GetEventsResponse >")),(0,r.kt)("p",null,"Gets all the events filtered"),(0,r.kt)("h5",{id:"eventfilter"},(0,r.kt)("em",{parentName:"h5"},"EventFilter")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type EventFilter = {\n  fromBlock: string;\n  toBlock: string;\n  address: string;\n  keys: string[];\n  page_size: number;\n  page_number: number;\n};\n")),(0,r.kt)("h6",{id:"geteventsresponse"},(0,r.kt)("em",{parentName:"h6"},"GetEventsResponse")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  events: StarknetEmittedEvent[];\n  page_number: number;\n  is_last_page: number;\n}\n")))}k.isMDXComponent=!0}}]);