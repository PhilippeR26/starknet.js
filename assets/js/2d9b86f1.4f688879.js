"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[69848],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,d=u["".concat(l,".").concat(m)]||u[m]||g[m]||i;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94844:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:3},s="Signer",o={unversionedId:"API/signer",id:"version-4.17.1/API/signer",title:"Signer",description:"The Signer API allows you to sign transactions and messages, and also allows you to get the public key.",source:"@site/versioned_docs/version-4.17.1/API/signer.md",sourceDirName:"API",slug:"/API/signer",permalink:"/starknet.js/docs/4.17.1/API/signer",draft:!1,tags:[],version:"4.17.1",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Account",permalink:"/starknet.js/docs/4.17.1/API/account"},next:{title:"Contract",permalink:"/starknet.js/docs/4.17.1/API/contract"}},l={},c=[{value:"Creating an instance",id:"creating-an-instance",level:2},{value:"Methods",id:"methods",level:2},{value:"getPubKey()",id:"getpubkey",level:3},{value:"signTransaction()",id:"signtransaction",level:3},{value:"<em>Signature</em>",id:"signature",level:6},{value:"signMessage()",id:"signmessage",level:3},{value:"<em>Signature</em>",id:"signature-1",level:6},{value:"signDeployAccountTransaction()",id:"signdeployaccounttransaction",level:3},{value:"<em>Signature</em>",id:"signature-2",level:6},{value:"signDeclareTransaction()",id:"signdeclaretransaction",level:3},{value:"<em>Signature</em>",id:"signature-3",level:6}],p={toc:c},u="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"signer"},"Signer"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Signer")," API allows you to sign transactions and messages, and also allows you to get the public key."),(0,r.kt)("h2",{id:"creating-an-instance"},"Creating an instance"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"new starknet.Signer(keyPair)")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"getpubkey"},"getPubKey()"),(0,r.kt)("p",null,"signer.",(0,r.kt)("strong",{parentName:"p"},"getPubKey"),"() => ",(0,r.kt)("em",{parentName:"p"},"Promise < string >")),(0,r.kt)("p",null,"Returns the public key of the signer."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"signtransaction"},"signTransaction()"),(0,r.kt)("p",null,"signer.",(0,r.kt)("strong",{parentName:"p"},"signTransaction"),"(transactions, transactionsDetail ","[ , abi ]",") => ",(0,r.kt)("em",{parentName:"p"},"Promise < Signature >")),(0,r.kt)("p",null,"Signs a transaction with the Starknet private key and returns the signature."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"transactions")," object for write methods may include any of:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"contractAddress")," - the address of the contract"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"entrypoint")," - the entrypoint of the contract"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"calldata")," - (defaults to []) the calldata")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"abi")," - (optional) the abi of the contract for better displaying"),(0,r.kt)("h6",{id:"signature"},(0,r.kt)("em",{parentName:"h6"},"Signature")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"string[]\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"signmessage"},"signMessage()"),(0,r.kt)("p",null,"signer.",(0,r.kt)("strong",{parentName:"p"},"signMessage"),"(typedData, accountAddress) => ",(0,r.kt)("em",{parentName:"p"},"Promise < Signature >")),(0,r.kt)("p",null,"Sign an JSON object for off-chain usage with the Starknet private key and return the signature. This adds a message prefix so it cant be interchanged with transactions."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"typedData")," - JSON object to be signed\n",(0,r.kt)("em",{parentName:"p"},"accountAddress")," - calldata to be passed in deploy constructor"),(0,r.kt)("h6",{id:"signature-1"},(0,r.kt)("em",{parentName:"h6"},"Signature")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"string[]\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"signdeployaccounttransaction"},"signDeployAccountTransaction()"),(0,r.kt)("p",null,"signer.",(0,r.kt)("strong",{parentName:"p"},"signDeployAccountTransaction"),"(transaction) => ",(0,r.kt)("em",{parentName:"p"},"Promise < Signature >")),(0,r.kt)("p",null,"Signs a DEPLOY_ACCOUNT transaction with the Starknet private key and returns the signature."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"transactions")," object for write methods may include any of:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"contractAddress")," - the address of the contract"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"constructorCalldata")," - calldata to be passed in deploy constructor"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"addressSalt")," - contract address salt"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"chainId")," - the chainId to declare contract on"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"maxFee")," - maxFee for the declare transaction"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"version")," - transaction version"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"nonce")," - Nonce of the declare transaction")),(0,r.kt)("h6",{id:"signature-2"},(0,r.kt)("em",{parentName:"h6"},"Signature")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"string[]\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"signdeclaretransaction"},"signDeclareTransaction()"),(0,r.kt)("p",null,"signer.",(0,r.kt)("strong",{parentName:"p"},"signDeclareTransaction"),"(transaction, transactionsDetail ","[ , abi ]",") => ",(0,r.kt)("em",{parentName:"p"},"Promise < Signature >")),(0,r.kt)("p",null,"Signs a DECLARE transaction with the Starknet private key and returns the signature."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"transaction")," object for write methods may include any of:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"classHash")," - computed class hash. Will be replaced by ContractClass in future once class hash is present in CompiledContract"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"senderAddress")," - the address of the sender"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"chainId")," - the chainId to declare contract on"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"maxFee")," - maxFee for the declare transaction"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"version")," - transaction version"),(0,r.kt)("li",{parentName:"ul"},"transactions.",(0,r.kt)("strong",{parentName:"li"},"nonce")," - Nonce of the declare transaction")),(0,r.kt)("h6",{id:"signature-3"},(0,r.kt)("em",{parentName:"h6"},"Signature")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"string[]\n")))}g.isMDXComponent=!0}}]);