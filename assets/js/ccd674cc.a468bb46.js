"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[48835],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>h});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),l=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},d=function(t){var e=l(t.components);return a.createElement(s.Provider,{value:e},t.children)},u="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(h,c(c({ref:e},d),{},{components:n})):a.createElement(h,c({ref:e},d))}));function h(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[u]="string"==typeof t?t:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},91354:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:6},c="Interact with your contract",i={unversionedId:"guides/interact",id:"version-4.22.0/guides/interact",title:"Interact with your contract",description:"Once your provider, contract and account are connected, you can interact with the contract:",source:"@site/versioned_docs/version-4.22.0/guides/interact.md",sourceDirName:"guides",slug:"/guides/interact",permalink:"/starknet.js/docs/4.22.0/guides/interact",draft:!1,tags:[],version:"4.22.0",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udd0c Connect a deployed contract",permalink:"/starknet.js/docs/4.22.0/guides/connect_contract"},next:{title:"Create new contract",permalink:"/starknet.js/docs/4.22.0/guides/create_contract"}},s={},l=[{value:"\ud83d\udd0d Read contract memory, with call",id:"-read-contract-memory-with-call",level:2},{value:"\u270d\ufe0f Write contract memory, with invoke",id:"\ufe0f-write-contract-memory-with-invoke",level:2},{value:"Use meta-class of Contract",id:"use-meta-class-of-contract",level:2},{value:"Write to contract memory, with Account.execute",id:"write-to-contract-memory-with-accountexecute",level:2}],d={toc:l},u="wrapper";function p(t){let{components:e,...o}=t;return(0,r.kt)(u,(0,a.Z)({},d,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interact-with-your-contract"},"Interact with your contract"),(0,r.kt)("p",null,"Once your provider, contract and account are connected, you can interact with the contract:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"you can read the memory of the contract, without fees."),(0,r.kt)("li",{parentName:"ul"},"you can write to memory, but you have to pay fees.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"On Mainnet, you have to pay fees with bridged ETH token."),(0,r.kt)("li",{parentName:"ul"},"On Testnet 1 & 2, you have to pay with bridged Goerli ETH token."),(0,r.kt)("li",{parentName:"ul"},"On devnet, you have to pay with dummy ETH token.")))),(0,r.kt)("p",null,"Your account should be funded enough to pay fees (0.01 ETH should be enough to start)."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(65342).Z,width:"805",height:"545"})),(0,r.kt)("p",null,"Here we will interact with a ",(0,r.kt)("inlineCode",{parentName:"p"},"test.cairo")," contract, already deployed in Testnet 1 and Testnet 2, at addresses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"testnet1: ",(0,r.kt)("a",{parentName:"li",href:"https://testnet.starkscan.co/contract/0x5f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd#read-contract"},"0x5f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd"),"."),(0,r.kt)("li",{parentName:"ul"},"testnet2: ",(0,r.kt)("a",{parentName:"li",href:"https://testnet-2.starkscan.co/contract/0x002367db6b0df07033d196dcd25961109d8fbc86227158343149742284c7582e#read-contract"},"0x2367db6b0df07033d196dcd25961109d8fbc86227158343149742284c7582e"),".")),(0,r.kt)("p",null,"We will use Testnet1, so you need a funded wallet in this network."),(0,r.kt)("p",null,"This contract contains a storage memory called ",(0,r.kt)("inlineCode",{parentName:"p"},"balance"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It can be read with the ",(0,r.kt)("inlineCode",{parentName:"li"},"@view function: get_balance()")),(0,r.kt)("li",{parentName:"ul"},"Balance can be modified with the ",(0,r.kt)("inlineCode",{parentName:"li"},"@external function: increase_balance(amount1: felt, amount2: felt)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Provider, Contract, Account, ec, json } from "starknet";\n')),(0,r.kt)("h2",{id:"-read-contract-memory-with-call"},"\ud83d\udd0d Read contract memory, with call"),(0,r.kt)("p",null,"To read the balance, you need only to connect a Provider and a Contract.",(0,r.kt)("br",{parentName:"p"}),"\n","You have to use the call function: ",(0,r.kt)("inlineCode",{parentName:"p"},'contract.call("function_name", [params])')," (here ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," is not necessary, because there are no parameters for the ",(0,r.kt)("inlineCode",{parentName:"p"},"get_balance")," function)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'//initialize Provider\nconst provider = new Provider({ sequencer: { network: "goerli-alpha" } });\n// Connect the deployed Test contract in Testnet\nconst testAddress = "0x5f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd";\n\n// read abi of Test contract\nconst { abi: testAbi } = await provider.getClassAt(testAddress);\nif (testAbi === undefined) { throw new Error("no abi.") };\nconst myTestContract = new Contract(testAbi, testAddress, provider);\n\n// Interaction with the contract with call\nconst bal1 = await myTestContract.call("get_balance");\nconsole.log("Initial balance =", bal1.res.toString()); // .res because the  return value is called \'res\' in the cairo contract\n')),(0,r.kt)("h2",{id:"\ufe0f-write-contract-memory-with-invoke"},"\u270d\ufe0f Write contract memory, with invoke"),(0,r.kt)("p",null,"To increase the balance, you need in addition a connected and funded Account."),(0,r.kt)("p",null,"You have to use the invoke function: ",(0,r.kt)("inlineCode",{parentName:"p"},'contract.invoke("function_name", [params])'),"\nAfter the invoke function, you have to wait the incorporation of the modification of Balance in the network, with ",(0,r.kt)("inlineCode",{parentName:"p"},"await provider.waitForTransaction(transaction_hash)")),(0,r.kt)("p",null,"Here is an example to increase and check the balance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'//initialize Provider\nconst provider = new Provider({ sequencer: { network: "goerli-alpha" } });\n// connect your account. To adapt to your own account:\nconst privateKey0 = process.env.OZ_ACCOUNT_PRIVATE_KEY;\nconst account0Address = "0x123....789";\n\nconst starkKeyPair0 = ec.getKeyPair(privateKey0);\nconst account0 = new Account(provider, account0Address, starkKeyPair0);\n\n// Connect the deployed Test contract in Testnet\nconst testAddress = "0x5f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd";\n\n// read abi of Test contract\nconst { abi: testAbi } = await provider.getClassAt(testAddress);\nif (testAbi === undefined) { throw new Error("no abi.") };\nconst myTestContract = new Contract(testAbi, testAddress, provider);\n\n// Connect account with the contract\nmyTestContract.connect(account0);\n\n// Interactions with the contract with call & invoke\nconst bal1 = await myTestContract.call("get_balance");\nconsole.log("Initial balance =", bal1.res.toString());\nconst res = await myTestContract.invoke("increase_balance", [10, 30]);\n\nawait provider.waitForTransaction(res.transaction_hash);\nconst bal2 = await myTestContract.call("get_balance");\nconsole.log("Initial balance =", bal2.res.toString());\n')),(0,r.kt)("h2",{id:"use-meta-class-of-contract"},"Use meta-class of Contract"),(0,r.kt)("p",null,"You have another way to interact with a contract - the meta-class: each ",(0,r.kt)("inlineCode",{parentName:"p"},"Contract")," object as specific functions to interact. For example here, we have 2 additional functions for the Test contract object:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Contract.get_balance()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Contract.increase_balance()"))),(0,r.kt)("p",null,"The code can be modified this way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'//initialize Provider\nconst provider = new Provider({ sequencer: { network: "goerli-alpha" } });\n// connect your account. To adapt to your own account:\nconst privateKey0 = process.env.OZ_ACCOUNT_PRIVATE_KEY;\nconst account0Address = "0x123....789";\n\nconst starkKeyPair0 = ec.getKeyPair(privateKey0);\nconst account0 = new Account(provider, account0Address, starkKeyPair0);\n\n// Connect the deployed Test contract in Testnet\nconst testAddress = "0x5f7cd1fd465baff2ba9d2d1501ad0a2eb5337d9a885be319366b5205a414fdd";\n\n// read abi of Test contract\nconst { abi: testAbi } = await provider.getClassAt(testAddress);\nif (testAbi === undefined) { throw new Error("no abi.") };\nconst myTestContract = new Contract(testAbi, testAddress, provider);\n\n// Connect account with the contract\nmyTestContract.connect(account0);\n\n// Interactions with the contract with call & invoke\nconst bal1 = await myTestContract.get_balance();\nconsole.log("Initial balance =", bal1.res.toString());\n\nconst resu = await myTestContract.increase_balance(10, 30);\nawait provider.waitForTransaction(resu.transaction_hash);\n\nconst bal2 = await myTestContract.get_balance();import { Provider, Contract, Account, ec, json } from "starknet";\nconsole.log("Initial balance =", bal2.res.toString());\n')),(0,r.kt)("h2",{id:"write-to-contract-memory-with-accountexecute"},"Write to contract memory, with Account.execute"),(0,r.kt)("p",null,"If you have to invoke a function of a contract that need the proof that you have the private key of the account, you have to invoke this function with ",(0,r.kt)("inlineCode",{parentName:"p"},"account.execute"),"."),(0,r.kt)("p",null,"We will see this case more in detail in ERC20 scripts, but in summary, you use this command with the following parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"address of the contract to invoke"),(0,r.kt)("li",{parentName:"ul"},"name of the function to invoke"),(0,r.kt)("li",{parentName:"ul"},"and array of parameters for this function")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const executeHash = await account.execute(\n  {\n    contractAddress: myContractAddress,\n    entrypoint: 'transfer',\n    calldata: stark.compileCalldata({\n      recipient: receiverAddress,\n      amount: ['10']\n    })\n  }\n);\nawait provider.waitForTransaction(executeHash.transaction_hash);\n")))}p.isMDXComponent=!0},65342:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/Interact_contract-bf3c4a34008afdc2fb08f0b30f83111e.png"}}]);