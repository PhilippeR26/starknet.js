"use strict";(self.webpackChunkwww=self.webpackChunkwww||[]).push([[69435],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),d=l,k=u["".concat(i,".").concat(d)]||u[d]||m[d]||r;return a?n.createElement(k,o(o({ref:t},p),{},{components:a})):n.createElement(k,o({ref:t},p))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:l,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},50097:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(87462),l=(a(67294),a(3905));const r={sidebar_position:2},o="Account",s={unversionedId:"guides/Old_API_doc/account",id:"version-5.14.1/guides/Old_API_doc/account",title:"Account",description:"An Account extends Provider and inherits all of its methods.",source:"@site/versioned_docs/version-5.14.1/guides/Old_API_doc/account.md",sourceDirName:"guides/Old_API_doc",slug:"/guides/Old_API_doc/account",permalink:"/starknet.js/docs/5.14.1/guides/Old_API_doc/account",draft:!1,tags:[],version:"5.14.1",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Sequencer Provider",permalink:"/starknet.js/docs/5.14.1/guides/Old_API_doc/Provider/sequencerProvider"},next:{title:"Signer",permalink:"/starknet.js/docs/5.14.1/guides/Old_API_doc/signer"}},i={},c=[{value:"Creating an instance",id:"creating-an-instance",level:2},{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"getNonce()",id:"getnonce",level:3},{value:"estimateInvokeFee()",id:"estimateinvokefee",level:3},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse",level:6},{value:"estimateDeclareFee()",id:"estimatedeclarefee",level:3},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse-1",level:6},{value:"estimateAccountDeployFee()",id:"estimateaccountdeployfee",level:3},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse-2",level:6},{value:"estimateFeeBulk()",id:"estimatefeebulk",level:3},{value:"<em>EstimateFeeResponse</em>",id:"estimatefeeresponse-3",level:6},{value:"execute()",id:"execute",level:3},{value:"<em>InvokeFunctionResponse</em>",id:"invokefunctionresponse",level:6},{value:"declare()",id:"declare",level:3},{value:"<em>DeclareContractResponse</em>",id:"declarecontractresponse",level:6},{value:"deploy()",id:"deploy",level:3},{value:"deployContract()",id:"deploycontract",level:3},{value:"declareAndDeploy()",id:"declareanddeploy",level:3},{value:"deployAccount()",id:"deployaccount",level:3},{value:"<em>DeployContractResponse</em>",id:"deploycontractresponse",level:6},{value:"signMessage()",id:"signmessage",level:3},{value:"<em>Signature</em>",id:"signature",level:6},{value:"hashMessage()",id:"hashmessage",level:3},{value:"verifyMessageHash()",id:"verifymessagehash",level:3},{value:"verifyMessage()",id:"verifymessage",level:3},{value:"getSuggestedMaxFee()",id:"getsuggestedmaxfee",level:3},{value:"getStarkName()",id:"getstarkname",level:3},{value:"simulateTransaction()",id:"simulatetransaction",level:3},{value:"<em>TransactionSimulationResponse</em>",id:"transactionsimulationresponse",level:6}],p={toc:c},u="wrapper";function m(e){let{components:t,...a}=e;return(0,l.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"account"},"Account"),(0,l.kt)("p",null,"An Account extends ",(0,l.kt)("ins",null,(0,l.kt)("a",{parentName:"p",href:"./Provider"},(0,l.kt)("inlineCode",{parentName:"a"},"Provider")))," and inherits all of its methods."),(0,l.kt)("p",null,"It also introduces new methods that allow Accounts to create and verify signatures with a custom ",(0,l.kt)("ins",null,(0,l.kt)("a",{parentName:"p",href:"./Signer"},(0,l.kt)("inlineCode",{parentName:"a"},"Signer"))),", declare and deploy Contract and deploy new Account"),(0,l.kt)("p",null,"This API is the primary way to interact with an account contract on Starknet."),(0,l.kt)("h2",{id:"creating-an-instance"},"Creating an instance"),(0,l.kt)("p",null,"To create a new instance of the Account, first an account contract must be deployed. Also there needs to be a Provider instance that will be passed in the constructor and key pair for the account."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"new starknet.Account(Provider, address, pk)")),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"address")," => ",(0,l.kt)("em",{parentName:"p"},"string")),(0,l.kt)("p",null,"The address of the account contract."),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"getnonce"},"getNonce()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"getNonce(blockIdentifier)")," => ",(0,l.kt)("em",{parentName:"p"},"Promise < BigNumberish >")),(0,l.kt)("p",null,"Gets the nonce of the account with respect to a specific block."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"blockIdentifier")," - optional blockIdentifier. Defaults to 'pending'."),(0,l.kt)("p",null,"Returns the nonce of the account."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"estimateinvokefee"},"estimateInvokeFee()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"estimateInvokeFee"),"(calls ","[ , estimateFeeDetails ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,l.kt)("p",null,"Estimate Fee for executing an INVOKE transaction on Starknet."),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"calls")," object structure:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"calls.",(0,l.kt)("strong",{parentName:"li"},"contractAddress")," - Address of the contract"),(0,l.kt)("li",{parentName:"ul"},"calls.",(0,l.kt)("strong",{parentName:"li"},"entrypoint")," - Entrypoint of the call (method name)"),(0,l.kt)("li",{parentName:"ul"},"calls.",(0,l.kt)("strong",{parentName:"li"},"calldata")," - Payload for the invoking method")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"estimateFeeDetails")," object may include any of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"estimateFeeDetails.",(0,l.kt)("strong",{parentName:"li"},"blockIdentifier")," - Block Identifier for the transaction"),(0,l.kt)("li",{parentName:"ul"},"estimateFeeDetails.",(0,l.kt)("strong",{parentName:"li"},"nonce")," - Nonce for the transaction")),(0,l.kt)("h6",{id:"estimatefeeresponse"},(0,l.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"estimatedeclarefee"},"estimateDeclareFee()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"estimateDeclareFee"),"(contractPayload ","[ , estimateFeeDetails ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,l.kt)("p",null,"Estimate Fee for executing a DECLARE transaction on Starknet."),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"contractPayload")," object structure:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"contract")," - The compiled contract"),(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"classHash")," - This can be obtained by using starknet-cli. Once the classHash is included in CompiledContract, this can be removed")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"estimateFeeDetails")," object may include any of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"estimateFeeDetails.",(0,l.kt)("strong",{parentName:"li"},"blockIdentifier")," - Block Identifier for the transaction"),(0,l.kt)("li",{parentName:"ul"},"estimateFeeDetails.",(0,l.kt)("strong",{parentName:"li"},"nonce")," - Nonce for the transaction")),(0,l.kt)("h6",{id:"estimatefeeresponse-1"},(0,l.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"estimateaccountdeployfee"},"estimateAccountDeployFee()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"estimateAccountDeployFee"),"(contractPayload ","[ , estimateFeeDetails ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse >")),(0,l.kt)("p",null,"Estimate Fee for executing a DEPLOY_ACCOUNT transaction on Starknet"),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"contractPayload")," object structure:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"contract")," - The compiled contract to be declared"),(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"classHash")," - This can be obtained by using starknet-cli. Once the classHash is included in CompiledContract, this can be removed")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"estimateFeeDetails")," object may include any of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"estimateFeeDetails.",(0,l.kt)("strong",{parentName:"li"},"blockIdentifier")," - Block Identifier for the transaction"),(0,l.kt)("li",{parentName:"ul"},"estimateFeeDetails.",(0,l.kt)("strong",{parentName:"li"},"nonce")," - Nonce for the transaction")),(0,l.kt)("h6",{id:"estimatefeeresponse-2"},(0,l.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"estimatefeebulk"},"estimateFeeBulk()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"estimateFeeBulk"),"(transaction","[][ , estimateFeeDetails ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < EstimateFeeResponse[] >")),(0,l.kt)("p",null,"Estimate Fee for executing a list of transactions on starknet."),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"transaction")," object structure:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"transaction.",(0,l.kt)("strong",{parentName:"li"},"type")," - the type of transaction: 'DECLARE' | 'DEPLOY' | 'INVOKE_FUNCTION' | 'DEPLOY_ACCOUNT'"),(0,l.kt)("li",{parentName:"ul"},"transaction payload - the payload for the transaction")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"estimateFeeDetails")," object may include any of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"estimateFeeDetails.",(0,l.kt)("strong",{parentName:"li"},"blockIdentifier")," - Block Identifier for the transaction"),(0,l.kt)("li",{parentName:"ul"},"estimateFeeDetails.",(0,l.kt)("strong",{parentName:"li"},"nonce")," - Nonce for the transaction")),(0,l.kt)("h6",{id:"estimatefeeresponse-3"},(0,l.kt)("em",{parentName:"h6"},"EstimateFeeResponse")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  overall_fee: BN;\n  gas_consumed?: BN;\n  gas_price?: BN;\n}\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"execute"},"execute()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"execute"),"(transactions ","[ , abi , transactionsDetail ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < InvokeFunctionResponse >")),(0,l.kt)("p",null,"Executes one or multiple calls using the account contract. If there is only one call, ",(0,l.kt)("em",{parentName:"p"},"transactions")," will be an object that contains parameters below. If there are multiple calls, ",(0,l.kt)("em",{parentName:"p"},"transactions")," will be an array that contains several objects mentioned above."),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"transactions")," object structure:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"contractAddress")," - the address of the contract"),(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"entrypoint")," - the entrypoint of the contract"),(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"calldata")," - (defaults to []) the calldata"),(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"signature")," - (defaults to []) the signature")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"abi")," - (optional) the abi of the contract for better displaying"),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"transactionsDetail")," object may include any of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"transactionsDetail.",(0,l.kt)("strong",{parentName:"li"},"maxFee")," - Max Fee that that will be used to execute the call(s)"),(0,l.kt)("li",{parentName:"ul"},"transactionsDetail.",(0,l.kt)("strong",{parentName:"li"},"nonce")," - Nonce for the transaction"),(0,l.kt)("li",{parentName:"ul"},"transactionsDetail.",(0,l.kt)("strong",{parentName:"li"},"version")," - Version for the transaction (default is 1)")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"// When there is only one call\nconst call = await account.execute(\n  {\n    contractAddress: '0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',  // ETH contract address\n    entrypoint: 'approve',\n    calldata: starknet.CallData.compile(\n      {\n        spender: \"0x15e90f807a00a01df845460324fbcd33986f2df3cc9d981e9e8b5005b7f595e\",\n        amount: {\n          type: 'struct',\n          low: '1',   // 1 wei\n          high: '0',\n        }\n      }\n    ),\n  },\n  undefined,\n  {\n    nonce: '10',\n  }\n);\n\n// When there are multiple calls\nconst multiCall = await account.execute(\n  [\n    {\n      contractAddress: '0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7',  // ETH contract address\n      entrypoint: 'approve',\n      calldata: starknet.CallData.compile(\n        {\n          spender: \"0x15e90f807a00a01df845460324fbcd33986f2df3cc9d981e9e8b5005b7f595e\",\n          amount: {\n            type: 'struct',\n            low: '1',   // 1 wei\n            high: '0',\n          }\n        }\n      ),\n    },\n    {\n      contractAddress: '0x15e90f807a00a01df845460324fbcd33986f2df3cc9d981e9e8b5005b7f595e',\n      entrypoint: 'transfer_ether',\n      calldata: ['1', '0'],  // 1 wei\n    }\n  ],\n  undefined,\n  {\n    nonce: '10',\n  }\n);\n")),(0,l.kt)("h6",{id:"invokefunctionresponse"},(0,l.kt)("em",{parentName:"h6"},"InvokeFunctionResponse")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transaction_hash: string;\n};\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"declare"},"declare()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"declare"),"(contractPayload ","[ , transactionsDetail ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < DeclareContractResponse >")),(0,l.kt)("p",null,"Declares a given compiled contract (json) to starknet."),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"contractPayload")," object consists of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"contract")," - The compiled contract"),(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"classHash")," - Hash of the compiled contract")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"transactionsDetail")," object may include any of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"transactionsDetail.",(0,l.kt)("strong",{parentName:"li"},"maxFee")," - Max Fee that that will be used to execute the call(s)"),(0,l.kt)("li",{parentName:"ul"},"transactionsDetail.",(0,l.kt)("strong",{parentName:"li"},"nonce")," - Nonce for the transaction"),(0,l.kt)("li",{parentName:"ul"},"transactionsDetail.",(0,l.kt)("strong",{parentName:"li"},"version")," - Version for the transaction (default is 1)")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("em",{parentName:"p"},"Note:")," Once the classHash is included in CompiledContract, this parameter can be removed. Currently it can be pre-computed from starknet-cli.")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"const declareTx = await account.declare({\n  contract: compiledErc20,\n  // classHash is pre-computed from starknet-cli\n  classHash: '0x54328a1075b8820eb43caf0caa233923148c983742402dcfc38541dd843d01a',\n});\n")),(0,l.kt)("h6",{id:"declarecontractresponse"},(0,l.kt)("em",{parentName:"h6"},"DeclareContractResponse")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  transaction_hash: string;\n  class_hash: string;\n};\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"deploy"},"deploy()"),(0,l.kt)("p",null,"Deploys a given compiled contract (json) to starknet, wrapper around ",(0,l.kt)("em",{parentName:"p"},"execute")," invoke function"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"deploy"),"(deployContractPayload ","[ , transactionsDetail ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < InvokeFunctionResponse >")),(0,l.kt)("p",null,"@param object ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"deployContractPayload"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"classHash"),": computed class hash of compiled contract"),(0,l.kt)("li",{parentName:"ul"},"optional constructorCalldata: constructor calldata"),(0,l.kt)("li",{parentName:"ul"},"optional salt: address salt - default random"),(0,l.kt)("li",{parentName:"ul"},"optional unique: bool if true ensure unique salt - default true")),(0,l.kt)("p",null,"@param object ",(0,l.kt)("strong",{parentName:"p"},"transactionsDetail")," Invocation Details"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"optional nonce"),(0,l.kt)("li",{parentName:"ul"},"optional version"),(0,l.kt)("li",{parentName:"ul"},"optional maxFee")),(0,l.kt)("p",null,"@returns ",(0,l.kt)("strong",{parentName:"p"},"transaction_hash")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"  const deployment = await account.deploy({\n    classHash: erc20ClassHash,\n    constructorCalldata: [\n      encodeShortString('Token'),\n      encodeShortString('ERC20'),\n      account.address,\n    ],\n    salt: randomAddress(),\n    unique: true, // Using true here so as not to clash with normal erc20 deploy in account and provider test\n  });\n\n  await provider.waitForTransaction(deployment.transaction_hash);\n")),(0,l.kt)("p",null,"Example multi-call:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"TODO Example with multi-call\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"deploycontract"},"deployContract()"),(0,l.kt)("p",null,"\u2705 NEW\nHigh level wrapper for deploy. Doesn't require waitForTransaction. Response similar to deprecated provider deployContract."),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"deployContract"),"(payload ","[ , details ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < DeployContractUDCResponse >")),(0,l.kt)("p",null,"@param object ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"payload"))," UniversalDeployerContractPayload"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"classHash"),": computed class hash of compiled contract"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"constructorCalldata"),": constructor calldata"),(0,l.kt)("li",{parentName:"ul"},"optional salt: address salt - default random"),(0,l.kt)("li",{parentName:"ul"},"optional unique: bool if true ensure unique salt - default true")),(0,l.kt)("p",null,"@param object ",(0,l.kt)("strong",{parentName:"p"},"details")," InvocationsDetails"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"optional nonce"),(0,l.kt)("li",{parentName:"ul"},"optional version"),(0,l.kt)("li",{parentName:"ul"},"optional maxFee")),(0,l.kt)("p",null,"@returns Promise DeployContractUDCResponse"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"contract_address"),(0,l.kt)("li",{parentName:"ul"},"transaction_hash"),(0,l.kt)("li",{parentName:"ul"},"address"),(0,l.kt)("li",{parentName:"ul"},"deployer"),(0,l.kt)("li",{parentName:"ul"},"unique"),(0,l.kt)("li",{parentName:"ul"},"classHash"),(0,l.kt)("li",{parentName:"ul"},"calldata_len"),(0,l.kt)("li",{parentName:"ul"},"calldata"),(0,l.kt)("li",{parentName:"ul"},"salt")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"  const deployResponse = await account.deployContract({\n    classHash: erc20ClassHash,\n    constructorCalldata: [\n      encodeShortString('Token'),\n      encodeShortString('ERC20'),\n      account.address,\n    ],\n  });\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"declareanddeploy"},"declareAndDeploy()"),(0,l.kt)("p",null,"\u2705 NEW\nHigh level wrapper for declare & deploy. Doesn't require waitForTransaction. Functionality similar to deprecated provider deployContract. Declare and Deploy contract using single function."),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"declareAndDeploy"),"(payload ","[ , details ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < DeclareDeployUDCResponse >")),(0,l.kt)("p",null,"@param object ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"payload"))," DeclareDeployContractPayload"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"contract"),": compiled contract code"),(0,l.kt)("li",{parentName:"ul"},"optional computed class hash of compiled contract"),(0,l.kt)("li",{parentName:"ul"},"optional constructorCalldata: constructor calldata"),(0,l.kt)("li",{parentName:"ul"},"optional salt: address salt - default random"),(0,l.kt)("li",{parentName:"ul"},"optional unique: bool if true ensure unique salt - default true")),(0,l.kt)("p",null,"@param object ",(0,l.kt)("strong",{parentName:"p"},"details")," InvocationsDetails"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"optional nonce"),(0,l.kt)("li",{parentName:"ul"},"optional version"),(0,l.kt)("li",{parentName:"ul"},"optional maxFee")),(0,l.kt)("p",null,"@returns Promise DeclareDeployUDCResponse"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"declare: CommonTransactionReceiptResponse",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"transaction_hash"),(0,l.kt)("li",{parentName:"ul"},"class_hash"))),(0,l.kt)("li",{parentName:"ul"},"deploy: DeployContractUDCResponse;",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"contract_address"),(0,l.kt)("li",{parentName:"ul"},"transaction_hash"),(0,l.kt)("li",{parentName:"ul"},"address"),(0,l.kt)("li",{parentName:"ul"},"deployer"),(0,l.kt)("li",{parentName:"ul"},"unique"),(0,l.kt)("li",{parentName:"ul"},"classHash"),(0,l.kt)("li",{parentName:"ul"},"calldata_len"),(0,l.kt)("li",{parentName:"ul"},"calldata"),(0,l.kt)("li",{parentName:"ul"},"salt")),(0,l.kt)("hr",{parentName:"li"}))),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"  const declareDeploy = await account.declareDeploy({\n    contract: compiledErc20,\n    constructorCalldata: [\n      encodeShortString('Token'),\n      encodeShortString('ERC20'),\n      account.address,\n    ],\n  });\n\n  const declareTransactionHash = declareDeploy.declare.transaction_hash\n  const erc20Address = declareDeploy.deploy.contract_address;\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"deployaccount"},"deployAccount()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"deployAccount"),"(contractPayload ","[ , transactionsDetail ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < DeployContractResponse >")),(0,l.kt)("p",null,"Declares a given compiled contract (json) to starknet."),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"contractPayload")," object consists of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"classHash")," - Hash of the compiled contract"),(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"constructorCalldata")," - optional"),(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"addressSalt")," - optional"),(0,l.kt)("li",{parentName:"ul"},"contractPayload.",(0,l.kt)("strong",{parentName:"li"},"contractAddress")," - optional")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"transactionsDetail")," object may include any of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"transactionsDetail.",(0,l.kt)("strong",{parentName:"li"},"maxFee")," - Max Fee that that will be used to execute the call(s)"),(0,l.kt)("li",{parentName:"ul"},"transactionsDetail.",(0,l.kt)("strong",{parentName:"li"},"nonce")," - Nonce for the transaction"),(0,l.kt)("li",{parentName:"ul"},"transactionsDetail.",(0,l.kt)("strong",{parentName:"li"},"version")," - Version for the transaction (default is 1)")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("em",{parentName:"p"},"Note:")," Once the classHash is included in CompiledContract, this parameter can be removed. Currently it can be pre-computed from starknet-cli.")),(0,l.kt)("h6",{id:"deploycontractresponse"},(0,l.kt)("em",{parentName:"h6"},"DeployContractResponse")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  contract_address: string;\n  transaction_hash: string;\n};\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"signmessage"},"signMessage()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"signMessage"),"(typedData) => ",(0,l.kt)("em",{parentName:"p"},"Promise < Signature >")),(0,l.kt)("p",null,"Sign an JSON object for off-chain usage with the starknet private key and return the signature. This adds a message prefix so it cant be interchanged with transactions."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"typedData")," - JSON object to be signed"),(0,l.kt)("h6",{id:"signature"},(0,l.kt)("em",{parentName:"h6"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"string[];\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"hashmessage"},"hashMessage()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"hashMessage"),"(typedData) => ",(0,l.kt)("em",{parentName:"p"},"Promise < string >")),(0,l.kt)("p",null,"Hash a JSON object with pederson hash and return the hash. This adds a message prefix so it cant be interchanged with transactions."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"typedData")," - JSON object to be signed"),(0,l.kt)("p",null,"Returns the hash of the JSON object."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"verifymessagehash"},"verifyMessageHash()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"verifyMessageHash"),"(hash, signature) => ",(0,l.kt)("em",{parentName:"p"},"Promise < boolean >")),(0,l.kt)("p",null,"Verify a signature of a given hash."),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"WARNING")),(0,l.kt)("p",{parentName:"blockquote"},"This method is not recommended, use ",(0,l.kt)("inlineCode",{parentName:"p"},"verifyMessage")," instead")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"verifymessage"},"verifyMessage()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"verifyMessage"),"(typedData, signature) => ",(0,l.kt)("em",{parentName:"p"},"Promise < boolean >")),(0,l.kt)("p",null,"Verify a signature of a JSON object."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"typedData")," - JSON object to be verified\n",(0,l.kt)("em",{parentName:"p"},"signature")," - signature of the JSON object"),(0,l.kt)("p",null,"Returns true if the signature is valid, false otherwise"),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getsuggestedmaxfee"},"getSuggestedMaxFee()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"getSuggestedMaxFee"),"(estimateFeeAction, details) => ",(0,l.kt)("em",{parentName:"p"},"Promise < BigNumberish >")),(0,l.kt)("p",null,"Gets Suggested Max Fee based on the transaction type."),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"details")," object may include any of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"details.",(0,l.kt)("strong",{parentName:"li"},"blockIdentifier")),(0,l.kt)("li",{parentName:"ul"},"details.",(0,l.kt)("strong",{parentName:"li"},"nonce"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getstarkname"},"getStarkName()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"getStarkName"),"(address, StarknetIdContract) => ",(0,l.kt)("em",{parentName:"p"},"Promise<string | Error>")),(0,l.kt)("p",null,"Gets starknet.id stark name with the address provided, if ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," uses the address of the account"),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"StarknetIdContract")," argument can be undefined, if it is, the function will automatically use official starknet id contracts of your network."),(0,l.kt)("p",null,"Returns directly a string (Example: ",(0,l.kt)("inlineCode",{parentName:"p"},"vitalik.stark"),")."),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"simulatetransaction"},"simulateTransaction()"),(0,l.kt)("p",null,"account.",(0,l.kt)("strong",{parentName:"p"},"simulateTransaction"),"(calls ","[ , estimateFeeDetails ]",") => ",(0,l.kt)("em",{parentName:"p"},"Promise < TransactionSimulationResponse >")),(0,l.kt)("p",null,"Simulates the transaction and returns the transaction trace and estimated fee."),(0,l.kt)("h6",{id:"transactionsimulationresponse"},(0,l.kt)("em",{parentName:"h6"},"TransactionSimulationResponse")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n  trace: TransactionTraceResponse;\n  fee_estimation: EstimateFee;\n}\n")))}m.isMDXComponent=!0}}]);